
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Utilisateur
 * 
 */
export type Utilisateur = $Result.DefaultSelection<Prisma.$UtilisateurPayload>
/**
 * Model Plante
 * 
 */
export type Plante = $Result.DefaultSelection<Prisma.$PlantePayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Conseil
 * 
 */
export type Conseil = $Result.DefaultSelection<Prisma.$ConseilPayload>
/**
 * Model Gardiennage
 * 
 */
export type Gardiennage = $Result.DefaultSelection<Prisma.$GardiennagePayload>
/**
 * Model Conversation
 * 
 */
export type Conversation = $Result.DefaultSelection<Prisma.$ConversationPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model AvoirRole
 * 
 */
export type AvoirRole = $Result.DefaultSelection<Prisma.$AvoirRolePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilisateurs
 * const utilisateurs = await prisma.utilisateur.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilisateurs
   * const utilisateurs = await prisma.utilisateur.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.utilisateur`: Exposes CRUD operations for the **Utilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateur.findMany()
    * ```
    */
  get utilisateur(): Prisma.UtilisateurDelegate<ExtArgs>;

  /**
   * `prisma.plante`: Exposes CRUD operations for the **Plante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plantes
    * const plantes = await prisma.plante.findMany()
    * ```
    */
  get plante(): Prisma.PlanteDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.conseil`: Exposes CRUD operations for the **Conseil** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conseils
    * const conseils = await prisma.conseil.findMany()
    * ```
    */
  get conseil(): Prisma.ConseilDelegate<ExtArgs>;

  /**
   * `prisma.gardiennage`: Exposes CRUD operations for the **Gardiennage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gardiennages
    * const gardiennages = await prisma.gardiennage.findMany()
    * ```
    */
  get gardiennage(): Prisma.GardiennageDelegate<ExtArgs>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.avoirRole`: Exposes CRUD operations for the **AvoirRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AvoirRoles
    * const avoirRoles = await prisma.avoirRole.findMany()
    * ```
    */
  get avoirRole(): Prisma.AvoirRoleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Utilisateur: 'Utilisateur',
    Plante: 'Plante',
    Role: 'Role',
    Conseil: 'Conseil',
    Gardiennage: 'Gardiennage',
    Conversation: 'Conversation',
    Message: 'Message',
    AvoirRole: 'AvoirRole'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "utilisateur" | "plante" | "role" | "conseil" | "gardiennage" | "conversation" | "message" | "avoirRole"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Utilisateur: {
        payload: Prisma.$UtilisateurPayload<ExtArgs>
        fields: Prisma.UtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilisateurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilisateurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findFirst: {
            args: Prisma.UtilisateurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilisateurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findMany: {
            args: Prisma.UtilisateurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          create: {
            args: Prisma.UtilisateurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          createMany: {
            args: Prisma.UtilisateurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UtilisateurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          delete: {
            args: Prisma.UtilisateurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          update: {
            args: Prisma.UtilisateurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.UtilisateurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UtilisateurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UtilisateurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          aggregate: {
            args: Prisma.UtilisateurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUtilisateur>
          }
          groupBy: {
            args: Prisma.UtilisateurGroupByArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilisateurCountArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurCountAggregateOutputType> | number
          }
        }
      }
      Plante: {
        payload: Prisma.$PlantePayload<ExtArgs>
        fields: Prisma.PlanteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>
          }
          findFirst: {
            args: Prisma.PlanteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>
          }
          findMany: {
            args: Prisma.PlanteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>[]
          }
          create: {
            args: Prisma.PlanteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>
          }
          createMany: {
            args: Prisma.PlanteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>[]
          }
          delete: {
            args: Prisma.PlanteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>
          }
          update: {
            args: Prisma.PlanteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>
          }
          deleteMany: {
            args: Prisma.PlanteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlanteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantePayload>
          }
          aggregate: {
            args: Prisma.PlanteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlante>
          }
          groupBy: {
            args: Prisma.PlanteGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanteGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanteCountArgs<ExtArgs>
            result: $Utils.Optional<PlanteCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Conseil: {
        payload: Prisma.$ConseilPayload<ExtArgs>
        fields: Prisma.ConseilFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConseilFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConseilFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>
          }
          findFirst: {
            args: Prisma.ConseilFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConseilFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>
          }
          findMany: {
            args: Prisma.ConseilFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>[]
          }
          create: {
            args: Prisma.ConseilCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>
          }
          createMany: {
            args: Prisma.ConseilCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConseilCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>[]
          }
          delete: {
            args: Prisma.ConseilDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>
          }
          update: {
            args: Prisma.ConseilUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>
          }
          deleteMany: {
            args: Prisma.ConseilDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConseilUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConseilUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConseilPayload>
          }
          aggregate: {
            args: Prisma.ConseilAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConseil>
          }
          groupBy: {
            args: Prisma.ConseilGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConseilGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConseilCountArgs<ExtArgs>
            result: $Utils.Optional<ConseilCountAggregateOutputType> | number
          }
        }
      }
      Gardiennage: {
        payload: Prisma.$GardiennagePayload<ExtArgs>
        fields: Prisma.GardiennageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GardiennageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GardiennageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>
          }
          findFirst: {
            args: Prisma.GardiennageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GardiennageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>
          }
          findMany: {
            args: Prisma.GardiennageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>[]
          }
          create: {
            args: Prisma.GardiennageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>
          }
          createMany: {
            args: Prisma.GardiennageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GardiennageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>[]
          }
          delete: {
            args: Prisma.GardiennageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>
          }
          update: {
            args: Prisma.GardiennageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>
          }
          deleteMany: {
            args: Prisma.GardiennageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GardiennageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GardiennageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GardiennagePayload>
          }
          aggregate: {
            args: Prisma.GardiennageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGardiennage>
          }
          groupBy: {
            args: Prisma.GardiennageGroupByArgs<ExtArgs>
            result: $Utils.Optional<GardiennageGroupByOutputType>[]
          }
          count: {
            args: Prisma.GardiennageCountArgs<ExtArgs>
            result: $Utils.Optional<GardiennageCountAggregateOutputType> | number
          }
        }
      }
      Conversation: {
        payload: Prisma.$ConversationPayload<ExtArgs>
        fields: Prisma.ConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findFirst: {
            args: Prisma.ConversationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findMany: {
            args: Prisma.ConversationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          create: {
            args: Prisma.ConversationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          createMany: {
            args: Prisma.ConversationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConversationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          delete: {
            args: Prisma.ConversationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          update: {
            args: Prisma.ConversationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          deleteMany: {
            args: Prisma.ConversationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConversationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          aggregate: {
            args: Prisma.ConversationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversation>
          }
          groupBy: {
            args: Prisma.ConversationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      AvoirRole: {
        payload: Prisma.$AvoirRolePayload<ExtArgs>
        fields: Prisma.AvoirRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AvoirRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvoirRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>
          }
          findFirst: {
            args: Prisma.AvoirRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvoirRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>
          }
          findMany: {
            args: Prisma.AvoirRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>[]
          }
          create: {
            args: Prisma.AvoirRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>
          }
          createMany: {
            args: Prisma.AvoirRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AvoirRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>[]
          }
          delete: {
            args: Prisma.AvoirRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>
          }
          update: {
            args: Prisma.AvoirRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>
          }
          deleteMany: {
            args: Prisma.AvoirRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AvoirRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AvoirRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvoirRolePayload>
          }
          aggregate: {
            args: Prisma.AvoirRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAvoirRole>
          }
          groupBy: {
            args: Prisma.AvoirRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<AvoirRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvoirRoleCountArgs<ExtArgs>
            result: $Utils.Optional<AvoirRoleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UtilisateurCountOutputType
   */

  export type UtilisateurCountOutputType = {
    plantes: number
    conseils: number
    gardiennages: number
    conversations: number
    conversations2: number
    messages: number
    roles: number
  }

  export type UtilisateurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plantes?: boolean | UtilisateurCountOutputTypeCountPlantesArgs
    conseils?: boolean | UtilisateurCountOutputTypeCountConseilsArgs
    gardiennages?: boolean | UtilisateurCountOutputTypeCountGardiennagesArgs
    conversations?: boolean | UtilisateurCountOutputTypeCountConversationsArgs
    conversations2?: boolean | UtilisateurCountOutputTypeCountConversations2Args
    messages?: boolean | UtilisateurCountOutputTypeCountMessagesArgs
    roles?: boolean | UtilisateurCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilisateurCountOutputType
     */
    select?: UtilisateurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountPlantesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanteWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountConseilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConseilWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountGardiennagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GardiennageWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountConversations2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UtilisateurCountOutputType without action
   */
  export type UtilisateurCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvoirRoleWhereInput
  }


  /**
   * Count Type PlanteCountOutputType
   */

  export type PlanteCountOutputType = {
    conseils: number
    gardiennages: number
  }

  export type PlanteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conseils?: boolean | PlanteCountOutputTypeCountConseilsArgs
    gardiennages?: boolean | PlanteCountOutputTypeCountGardiennagesArgs
  }

  // Custom InputTypes
  /**
   * PlanteCountOutputType without action
   */
  export type PlanteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanteCountOutputType
     */
    select?: PlanteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanteCountOutputType without action
   */
  export type PlanteCountOutputTypeCountConseilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConseilWhereInput
  }

  /**
   * PlanteCountOutputType without action
   */
  export type PlanteCountOutputTypeCountGardiennagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GardiennageWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    utilisateurs: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateurs?: boolean | RoleCountOutputTypeCountUtilisateursArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUtilisateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvoirRoleWhereInput
  }


  /**
   * Count Type ConversationCountOutputType
   */

  export type ConversationCountOutputType = {
    messages: number
  }

  export type ConversationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ConversationCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationCountOutputType
     */
    select?: ConversationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Utilisateur
   */

  export type AggregateUtilisateur = {
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  export type UtilisateurAvgAggregateOutputType = {
    idUtilisateur: number | null
  }

  export type UtilisateurSumAggregateOutputType = {
    idUtilisateur: number | null
  }

  export type UtilisateurMinAggregateOutputType = {
    idUtilisateur: number | null
    nom: string | null
    prenom: string | null
    dateNaissance: Date | null
    numero: string | null
    email: string | null
    adresse: string | null
    pseudo: string | null
    motDePasse: string | null
  }

  export type UtilisateurMaxAggregateOutputType = {
    idUtilisateur: number | null
    nom: string | null
    prenom: string | null
    dateNaissance: Date | null
    numero: string | null
    email: string | null
    adresse: string | null
    pseudo: string | null
    motDePasse: string | null
  }

  export type UtilisateurCountAggregateOutputType = {
    idUtilisateur: number
    nom: number
    prenom: number
    dateNaissance: number
    numero: number
    email: number
    adresse: number
    pseudo: number
    motDePasse: number
    _all: number
  }


  export type UtilisateurAvgAggregateInputType = {
    idUtilisateur?: true
  }

  export type UtilisateurSumAggregateInputType = {
    idUtilisateur?: true
  }

  export type UtilisateurMinAggregateInputType = {
    idUtilisateur?: true
    nom?: true
    prenom?: true
    dateNaissance?: true
    numero?: true
    email?: true
    adresse?: true
    pseudo?: true
    motDePasse?: true
  }

  export type UtilisateurMaxAggregateInputType = {
    idUtilisateur?: true
    nom?: true
    prenom?: true
    dateNaissance?: true
    numero?: true
    email?: true
    adresse?: true
    pseudo?: true
    motDePasse?: true
  }

  export type UtilisateurCountAggregateInputType = {
    idUtilisateur?: true
    nom?: true
    prenom?: true
    dateNaissance?: true
    numero?: true
    email?: true
    adresse?: true
    pseudo?: true
    motDePasse?: true
    _all?: true
  }

  export type UtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateur to aggregate.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilisateurs
    **/
    _count?: true | UtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateurMaxAggregateInputType
  }

  export type GetUtilisateurAggregateType<T extends UtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateur[P]>
      : GetScalarType<T[P], AggregateUtilisateur[P]>
  }




  export type UtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithAggregationInput | UtilisateurOrderByWithAggregationInput[]
    by: UtilisateurScalarFieldEnum[] | UtilisateurScalarFieldEnum
    having?: UtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateurCountAggregateInputType | true
    _avg?: UtilisateurAvgAggregateInputType
    _sum?: UtilisateurSumAggregateInputType
    _min?: UtilisateurMinAggregateInputType
    _max?: UtilisateurMaxAggregateInputType
  }

  export type UtilisateurGroupByOutputType = {
    idUtilisateur: number
    nom: string
    prenom: string
    dateNaissance: Date
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  type GetUtilisateurGroupByPayload<T extends UtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type UtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUtilisateur?: boolean
    nom?: boolean
    prenom?: boolean
    dateNaissance?: boolean
    numero?: boolean
    email?: boolean
    adresse?: boolean
    pseudo?: boolean
    motDePasse?: boolean
    plantes?: boolean | Utilisateur$plantesArgs<ExtArgs>
    conseils?: boolean | Utilisateur$conseilsArgs<ExtArgs>
    gardiennages?: boolean | Utilisateur$gardiennagesArgs<ExtArgs>
    conversations?: boolean | Utilisateur$conversationsArgs<ExtArgs>
    conversations2?: boolean | Utilisateur$conversations2Args<ExtArgs>
    messages?: boolean | Utilisateur$messagesArgs<ExtArgs>
    roles?: boolean | Utilisateur$rolesArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUtilisateur?: boolean
    nom?: boolean
    prenom?: boolean
    dateNaissance?: boolean
    numero?: boolean
    email?: boolean
    adresse?: boolean
    pseudo?: boolean
    motDePasse?: boolean
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectScalar = {
    idUtilisateur?: boolean
    nom?: boolean
    prenom?: boolean
    dateNaissance?: boolean
    numero?: boolean
    email?: boolean
    adresse?: boolean
    pseudo?: boolean
    motDePasse?: boolean
  }

  export type UtilisateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plantes?: boolean | Utilisateur$plantesArgs<ExtArgs>
    conseils?: boolean | Utilisateur$conseilsArgs<ExtArgs>
    gardiennages?: boolean | Utilisateur$gardiennagesArgs<ExtArgs>
    conversations?: boolean | Utilisateur$conversationsArgs<ExtArgs>
    conversations2?: boolean | Utilisateur$conversations2Args<ExtArgs>
    messages?: boolean | Utilisateur$messagesArgs<ExtArgs>
    roles?: boolean | Utilisateur$rolesArgs<ExtArgs>
    _count?: boolean | UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UtilisateurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilisateur"
    objects: {
      plantes: Prisma.$PlantePayload<ExtArgs>[]
      conseils: Prisma.$ConseilPayload<ExtArgs>[]
      gardiennages: Prisma.$GardiennagePayload<ExtArgs>[]
      conversations: Prisma.$ConversationPayload<ExtArgs>[]
      conversations2: Prisma.$ConversationPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      roles: Prisma.$AvoirRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idUtilisateur: number
      nom: string
      prenom: string
      dateNaissance: Date
      numero: string
      email: string
      adresse: string
      pseudo: string
      motDePasse: string
    }, ExtArgs["result"]["utilisateur"]>
    composites: {}
  }

  type UtilisateurGetPayload<S extends boolean | null | undefined | UtilisateurDefaultArgs> = $Result.GetResult<Prisma.$UtilisateurPayload, S>

  type UtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilisateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilisateurCountAggregateInputType | true
    }

  export interface UtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilisateur'], meta: { name: 'Utilisateur' } }
    /**
     * Find zero or one Utilisateur that matches the filter.
     * @param {UtilisateurFindUniqueArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UtilisateurFindUniqueArgs>(args: SelectSubset<T, UtilisateurFindUniqueArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Utilisateur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UtilisateurFindUniqueOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UtilisateurFindUniqueOrThrowArgs>(args: SelectSubset<T, UtilisateurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UtilisateurFindFirstArgs>(args?: SelectSubset<T, UtilisateurFindFirstArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UtilisateurFindFirstOrThrowArgs>(args?: SelectSubset<T, UtilisateurFindFirstOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany({ take: 10 })
     * 
     * // Only select the `idUtilisateur`
     * const utilisateurWithIdUtilisateurOnly = await prisma.utilisateur.findMany({ select: { idUtilisateur: true } })
     * 
     */
    findMany<T extends UtilisateurFindManyArgs>(args?: SelectSubset<T, UtilisateurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Utilisateur.
     * @param {UtilisateurCreateArgs} args - Arguments to create a Utilisateur.
     * @example
     * // Create one Utilisateur
     * const Utilisateur = await prisma.utilisateur.create({
     *   data: {
     *     // ... data to create a Utilisateur
     *   }
     * })
     * 
     */
    create<T extends UtilisateurCreateArgs>(args: SelectSubset<T, UtilisateurCreateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Utilisateurs.
     * @param {UtilisateurCreateManyArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UtilisateurCreateManyArgs>(args?: SelectSubset<T, UtilisateurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Utilisateurs and returns the data saved in the database.
     * @param {UtilisateurCreateManyAndReturnArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Utilisateurs and only return the `idUtilisateur`
     * const utilisateurWithIdUtilisateurOnly = await prisma.utilisateur.createManyAndReturn({ 
     *   select: { idUtilisateur: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UtilisateurCreateManyAndReturnArgs>(args?: SelectSubset<T, UtilisateurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Utilisateur.
     * @param {UtilisateurDeleteArgs} args - Arguments to delete one Utilisateur.
     * @example
     * // Delete one Utilisateur
     * const Utilisateur = await prisma.utilisateur.delete({
     *   where: {
     *     // ... filter to delete one Utilisateur
     *   }
     * })
     * 
     */
    delete<T extends UtilisateurDeleteArgs>(args: SelectSubset<T, UtilisateurDeleteArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Utilisateur.
     * @param {UtilisateurUpdateArgs} args - Arguments to update one Utilisateur.
     * @example
     * // Update one Utilisateur
     * const utilisateur = await prisma.utilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UtilisateurUpdateArgs>(args: SelectSubset<T, UtilisateurUpdateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Utilisateurs.
     * @param {UtilisateurDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UtilisateurDeleteManyArgs>(args?: SelectSubset<T, UtilisateurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UtilisateurUpdateManyArgs>(args: SelectSubset<T, UtilisateurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilisateur.
     * @param {UtilisateurUpsertArgs} args - Arguments to update or create a Utilisateur.
     * @example
     * // Update or create a Utilisateur
     * const utilisateur = await prisma.utilisateur.upsert({
     *   create: {
     *     // ... data to create a Utilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateur we want to update
     *   }
     * })
     */
    upsert<T extends UtilisateurUpsertArgs>(args: SelectSubset<T, UtilisateurUpsertArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateur.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends UtilisateurCountArgs>(
      args?: Subset<T, UtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateurAggregateArgs>(args: Subset<T, UtilisateurAggregateArgs>): Prisma.PrismaPromise<GetUtilisateurAggregateType<T>>

    /**
     * Group by Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: UtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilisateur model
   */
  readonly fields: UtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plantes<T extends Utilisateur$plantesArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$plantesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findMany"> | Null>
    conseils<T extends Utilisateur$conseilsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$conseilsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "findMany"> | Null>
    gardiennages<T extends Utilisateur$gardiennagesArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$gardiennagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findMany"> | Null>
    conversations<T extends Utilisateur$conversationsArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$conversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany"> | Null>
    conversations2<T extends Utilisateur$conversations2Args<ExtArgs> = {}>(args?: Subset<T, Utilisateur$conversations2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends Utilisateur$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    roles<T extends Utilisateur$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Utilisateur$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Utilisateur model
   */ 
  interface UtilisateurFieldRefs {
    readonly idUtilisateur: FieldRef<"Utilisateur", 'Int'>
    readonly nom: FieldRef<"Utilisateur", 'String'>
    readonly prenom: FieldRef<"Utilisateur", 'String'>
    readonly dateNaissance: FieldRef<"Utilisateur", 'DateTime'>
    readonly numero: FieldRef<"Utilisateur", 'String'>
    readonly email: FieldRef<"Utilisateur", 'String'>
    readonly adresse: FieldRef<"Utilisateur", 'String'>
    readonly pseudo: FieldRef<"Utilisateur", 'String'>
    readonly motDePasse: FieldRef<"Utilisateur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Utilisateur findUnique
   */
  export type UtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findUniqueOrThrow
   */
  export type UtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findFirst
   */
  export type UtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findFirstOrThrow
   */
  export type UtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findMany
   */
  export type UtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which Utilisateurs to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur create
   */
  export type UtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilisateur.
     */
    data: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
  }

  /**
   * Utilisateur createMany
   */
  export type UtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur createManyAndReturn
   */
  export type UtilisateurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur update
   */
  export type UtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilisateur.
     */
    data: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
    /**
     * Choose, which Utilisateur to update.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur updateMany
   */
  export type UtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur upsert
   */
  export type UtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilisateur to update in case it exists.
     */
    where: UtilisateurWhereUniqueInput
    /**
     * In case the Utilisateur found by the `where` argument doesn't exist, create a new Utilisateur with this data.
     */
    create: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
    /**
     * In case the Utilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
  }

  /**
   * Utilisateur delete
   */
  export type UtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    /**
     * Filter which Utilisateur to delete.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur deleteMany
   */
  export type UtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateurs to delete
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur.plantes
   */
  export type Utilisateur$plantesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    where?: PlanteWhereInput
    orderBy?: PlanteOrderByWithRelationInput | PlanteOrderByWithRelationInput[]
    cursor?: PlanteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanteScalarFieldEnum | PlanteScalarFieldEnum[]
  }

  /**
   * Utilisateur.conseils
   */
  export type Utilisateur$conseilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    where?: ConseilWhereInput
    orderBy?: ConseilOrderByWithRelationInput | ConseilOrderByWithRelationInput[]
    cursor?: ConseilWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConseilScalarFieldEnum | ConseilScalarFieldEnum[]
  }

  /**
   * Utilisateur.gardiennages
   */
  export type Utilisateur$gardiennagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    where?: GardiennageWhereInput
    orderBy?: GardiennageOrderByWithRelationInput | GardiennageOrderByWithRelationInput[]
    cursor?: GardiennageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GardiennageScalarFieldEnum | GardiennageScalarFieldEnum[]
  }

  /**
   * Utilisateur.conversations
   */
  export type Utilisateur$conversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Utilisateur.conversations2
   */
  export type Utilisateur$conversations2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Utilisateur.messages
   */
  export type Utilisateur$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Utilisateur.roles
   */
  export type Utilisateur$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    where?: AvoirRoleWhereInput
    orderBy?: AvoirRoleOrderByWithRelationInput | AvoirRoleOrderByWithRelationInput[]
    cursor?: AvoirRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AvoirRoleScalarFieldEnum | AvoirRoleScalarFieldEnum[]
  }

  /**
   * Utilisateur without action
   */
  export type UtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
  }


  /**
   * Model Plante
   */

  export type AggregatePlante = {
    _count: PlanteCountAggregateOutputType | null
    _avg: PlanteAvgAggregateOutputType | null
    _sum: PlanteSumAggregateOutputType | null
    _min: PlanteMinAggregateOutputType | null
    _max: PlanteMaxAggregateOutputType | null
  }

  export type PlanteAvgAggregateOutputType = {
    idPlante: number | null
    idUtilisateur: number | null
  }

  export type PlanteSumAggregateOutputType = {
    idPlante: number | null
    idUtilisateur: number | null
  }

  export type PlanteMinAggregateOutputType = {
    idPlante: number | null
    espece: string | null
    description: string | null
    nom: string | null
    adresse: string | null
    idUtilisateur: number | null
  }

  export type PlanteMaxAggregateOutputType = {
    idPlante: number | null
    espece: string | null
    description: string | null
    nom: string | null
    adresse: string | null
    idUtilisateur: number | null
  }

  export type PlanteCountAggregateOutputType = {
    idPlante: number
    espece: number
    description: number
    nom: number
    adresse: number
    idUtilisateur: number
    _all: number
  }


  export type PlanteAvgAggregateInputType = {
    idPlante?: true
    idUtilisateur?: true
  }

  export type PlanteSumAggregateInputType = {
    idPlante?: true
    idUtilisateur?: true
  }

  export type PlanteMinAggregateInputType = {
    idPlante?: true
    espece?: true
    description?: true
    nom?: true
    adresse?: true
    idUtilisateur?: true
  }

  export type PlanteMaxAggregateInputType = {
    idPlante?: true
    espece?: true
    description?: true
    nom?: true
    adresse?: true
    idUtilisateur?: true
  }

  export type PlanteCountAggregateInputType = {
    idPlante?: true
    espece?: true
    description?: true
    nom?: true
    adresse?: true
    idUtilisateur?: true
    _all?: true
  }

  export type PlanteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plante to aggregate.
     */
    where?: PlanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantes to fetch.
     */
    orderBy?: PlanteOrderByWithRelationInput | PlanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plantes
    **/
    _count?: true | PlanteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanteMaxAggregateInputType
  }

  export type GetPlanteAggregateType<T extends PlanteAggregateArgs> = {
        [P in keyof T & keyof AggregatePlante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlante[P]>
      : GetScalarType<T[P], AggregatePlante[P]>
  }




  export type PlanteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanteWhereInput
    orderBy?: PlanteOrderByWithAggregationInput | PlanteOrderByWithAggregationInput[]
    by: PlanteScalarFieldEnum[] | PlanteScalarFieldEnum
    having?: PlanteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanteCountAggregateInputType | true
    _avg?: PlanteAvgAggregateInputType
    _sum?: PlanteSumAggregateInputType
    _min?: PlanteMinAggregateInputType
    _max?: PlanteMaxAggregateInputType
  }

  export type PlanteGroupByOutputType = {
    idPlante: number
    espece: string
    description: string
    nom: string
    adresse: string
    idUtilisateur: number
    _count: PlanteCountAggregateOutputType | null
    _avg: PlanteAvgAggregateOutputType | null
    _sum: PlanteSumAggregateOutputType | null
    _min: PlanteMinAggregateOutputType | null
    _max: PlanteMaxAggregateOutputType | null
  }

  type GetPlanteGroupByPayload<T extends PlanteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanteGroupByOutputType[P]>
            : GetScalarType<T[P], PlanteGroupByOutputType[P]>
        }
      >
    >


  export type PlanteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPlante?: boolean
    espece?: boolean
    description?: boolean
    nom?: boolean
    adresse?: boolean
    idUtilisateur?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    conseils?: boolean | Plante$conseilsArgs<ExtArgs>
    gardiennages?: boolean | Plante$gardiennagesArgs<ExtArgs>
    _count?: boolean | PlanteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plante"]>

  export type PlanteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPlante?: boolean
    espece?: boolean
    description?: boolean
    nom?: boolean
    adresse?: boolean
    idUtilisateur?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plante"]>

  export type PlanteSelectScalar = {
    idPlante?: boolean
    espece?: boolean
    description?: boolean
    nom?: boolean
    adresse?: boolean
    idUtilisateur?: boolean
  }

  export type PlanteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    conseils?: boolean | Plante$conseilsArgs<ExtArgs>
    gardiennages?: boolean | Plante$gardiennagesArgs<ExtArgs>
    _count?: boolean | PlanteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }

  export type $PlantePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plante"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      conseils: Prisma.$ConseilPayload<ExtArgs>[]
      gardiennages: Prisma.$GardiennagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idPlante: number
      espece: string
      description: string
      nom: string
      adresse: string
      idUtilisateur: number
    }, ExtArgs["result"]["plante"]>
    composites: {}
  }

  type PlanteGetPayload<S extends boolean | null | undefined | PlanteDefaultArgs> = $Result.GetResult<Prisma.$PlantePayload, S>

  type PlanteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanteCountAggregateInputType | true
    }

  export interface PlanteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plante'], meta: { name: 'Plante' } }
    /**
     * Find zero or one Plante that matches the filter.
     * @param {PlanteFindUniqueArgs} args - Arguments to find a Plante
     * @example
     * // Get one Plante
     * const plante = await prisma.plante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanteFindUniqueArgs>(args: SelectSubset<T, PlanteFindUniqueArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Plante that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlanteFindUniqueOrThrowArgs} args - Arguments to find a Plante
     * @example
     * // Get one Plante
     * const plante = await prisma.plante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanteFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Plante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanteFindFirstArgs} args - Arguments to find a Plante
     * @example
     * // Get one Plante
     * const plante = await prisma.plante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanteFindFirstArgs>(args?: SelectSubset<T, PlanteFindFirstArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Plante that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanteFindFirstOrThrowArgs} args - Arguments to find a Plante
     * @example
     * // Get one Plante
     * const plante = await prisma.plante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanteFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanteFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Plantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plantes
     * const plantes = await prisma.plante.findMany()
     * 
     * // Get first 10 Plantes
     * const plantes = await prisma.plante.findMany({ take: 10 })
     * 
     * // Only select the `idPlante`
     * const planteWithIdPlanteOnly = await prisma.plante.findMany({ select: { idPlante: true } })
     * 
     */
    findMany<T extends PlanteFindManyArgs>(args?: SelectSubset<T, PlanteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Plante.
     * @param {PlanteCreateArgs} args - Arguments to create a Plante.
     * @example
     * // Create one Plante
     * const Plante = await prisma.plante.create({
     *   data: {
     *     // ... data to create a Plante
     *   }
     * })
     * 
     */
    create<T extends PlanteCreateArgs>(args: SelectSubset<T, PlanteCreateArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Plantes.
     * @param {PlanteCreateManyArgs} args - Arguments to create many Plantes.
     * @example
     * // Create many Plantes
     * const plante = await prisma.plante.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanteCreateManyArgs>(args?: SelectSubset<T, PlanteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plantes and returns the data saved in the database.
     * @param {PlanteCreateManyAndReturnArgs} args - Arguments to create many Plantes.
     * @example
     * // Create many Plantes
     * const plante = await prisma.plante.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plantes and only return the `idPlante`
     * const planteWithIdPlanteOnly = await prisma.plante.createManyAndReturn({ 
     *   select: { idPlante: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanteCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Plante.
     * @param {PlanteDeleteArgs} args - Arguments to delete one Plante.
     * @example
     * // Delete one Plante
     * const Plante = await prisma.plante.delete({
     *   where: {
     *     // ... filter to delete one Plante
     *   }
     * })
     * 
     */
    delete<T extends PlanteDeleteArgs>(args: SelectSubset<T, PlanteDeleteArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Plante.
     * @param {PlanteUpdateArgs} args - Arguments to update one Plante.
     * @example
     * // Update one Plante
     * const plante = await prisma.plante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanteUpdateArgs>(args: SelectSubset<T, PlanteUpdateArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Plantes.
     * @param {PlanteDeleteManyArgs} args - Arguments to filter Plantes to delete.
     * @example
     * // Delete a few Plantes
     * const { count } = await prisma.plante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanteDeleteManyArgs>(args?: SelectSubset<T, PlanteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plantes
     * const plante = await prisma.plante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanteUpdateManyArgs>(args: SelectSubset<T, PlanteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plante.
     * @param {PlanteUpsertArgs} args - Arguments to update or create a Plante.
     * @example
     * // Update or create a Plante
     * const plante = await prisma.plante.upsert({
     *   create: {
     *     // ... data to create a Plante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plante we want to update
     *   }
     * })
     */
    upsert<T extends PlanteUpsertArgs>(args: SelectSubset<T, PlanteUpsertArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Plantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanteCountArgs} args - Arguments to filter Plantes to count.
     * @example
     * // Count the number of Plantes
     * const count = await prisma.plante.count({
     *   where: {
     *     // ... the filter for the Plantes we want to count
     *   }
     * })
    **/
    count<T extends PlanteCountArgs>(
      args?: Subset<T, PlanteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanteAggregateArgs>(args: Subset<T, PlanteAggregateArgs>): Prisma.PrismaPromise<GetPlanteAggregateType<T>>

    /**
     * Group by Plante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanteGroupByArgs['orderBy'] }
        : { orderBy?: PlanteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plante model
   */
  readonly fields: PlanteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conseils<T extends Plante$conseilsArgs<ExtArgs> = {}>(args?: Subset<T, Plante$conseilsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "findMany"> | Null>
    gardiennages<T extends Plante$gardiennagesArgs<ExtArgs> = {}>(args?: Subset<T, Plante$gardiennagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plante model
   */ 
  interface PlanteFieldRefs {
    readonly idPlante: FieldRef<"Plante", 'Int'>
    readonly espece: FieldRef<"Plante", 'String'>
    readonly description: FieldRef<"Plante", 'String'>
    readonly nom: FieldRef<"Plante", 'String'>
    readonly adresse: FieldRef<"Plante", 'String'>
    readonly idUtilisateur: FieldRef<"Plante", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Plante findUnique
   */
  export type PlanteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * Filter, which Plante to fetch.
     */
    where: PlanteWhereUniqueInput
  }

  /**
   * Plante findUniqueOrThrow
   */
  export type PlanteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * Filter, which Plante to fetch.
     */
    where: PlanteWhereUniqueInput
  }

  /**
   * Plante findFirst
   */
  export type PlanteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * Filter, which Plante to fetch.
     */
    where?: PlanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantes to fetch.
     */
    orderBy?: PlanteOrderByWithRelationInput | PlanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plantes.
     */
    cursor?: PlanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plantes.
     */
    distinct?: PlanteScalarFieldEnum | PlanteScalarFieldEnum[]
  }

  /**
   * Plante findFirstOrThrow
   */
  export type PlanteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * Filter, which Plante to fetch.
     */
    where?: PlanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantes to fetch.
     */
    orderBy?: PlanteOrderByWithRelationInput | PlanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plantes.
     */
    cursor?: PlanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plantes.
     */
    distinct?: PlanteScalarFieldEnum | PlanteScalarFieldEnum[]
  }

  /**
   * Plante findMany
   */
  export type PlanteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * Filter, which Plantes to fetch.
     */
    where?: PlanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantes to fetch.
     */
    orderBy?: PlanteOrderByWithRelationInput | PlanteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plantes.
     */
    cursor?: PlanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantes.
     */
    skip?: number
    distinct?: PlanteScalarFieldEnum | PlanteScalarFieldEnum[]
  }

  /**
   * Plante create
   */
  export type PlanteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * The data needed to create a Plante.
     */
    data: XOR<PlanteCreateInput, PlanteUncheckedCreateInput>
  }

  /**
   * Plante createMany
   */
  export type PlanteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plantes.
     */
    data: PlanteCreateManyInput | PlanteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plante createManyAndReturn
   */
  export type PlanteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Plantes.
     */
    data: PlanteCreateManyInput | PlanteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Plante update
   */
  export type PlanteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * The data needed to update a Plante.
     */
    data: XOR<PlanteUpdateInput, PlanteUncheckedUpdateInput>
    /**
     * Choose, which Plante to update.
     */
    where: PlanteWhereUniqueInput
  }

  /**
   * Plante updateMany
   */
  export type PlanteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plantes.
     */
    data: XOR<PlanteUpdateManyMutationInput, PlanteUncheckedUpdateManyInput>
    /**
     * Filter which Plantes to update
     */
    where?: PlanteWhereInput
  }

  /**
   * Plante upsert
   */
  export type PlanteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * The filter to search for the Plante to update in case it exists.
     */
    where: PlanteWhereUniqueInput
    /**
     * In case the Plante found by the `where` argument doesn't exist, create a new Plante with this data.
     */
    create: XOR<PlanteCreateInput, PlanteUncheckedCreateInput>
    /**
     * In case the Plante was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanteUpdateInput, PlanteUncheckedUpdateInput>
  }

  /**
   * Plante delete
   */
  export type PlanteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
    /**
     * Filter which Plante to delete.
     */
    where: PlanteWhereUniqueInput
  }

  /**
   * Plante deleteMany
   */
  export type PlanteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plantes to delete
     */
    where?: PlanteWhereInput
  }

  /**
   * Plante.conseils
   */
  export type Plante$conseilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    where?: ConseilWhereInput
    orderBy?: ConseilOrderByWithRelationInput | ConseilOrderByWithRelationInput[]
    cursor?: ConseilWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConseilScalarFieldEnum | ConseilScalarFieldEnum[]
  }

  /**
   * Plante.gardiennages
   */
  export type Plante$gardiennagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    where?: GardiennageWhereInput
    orderBy?: GardiennageOrderByWithRelationInput | GardiennageOrderByWithRelationInput[]
    cursor?: GardiennageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GardiennageScalarFieldEnum | GardiennageScalarFieldEnum[]
  }

  /**
   * Plante without action
   */
  export type PlanteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plante
     */
    select?: PlanteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanteInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    idRole: number | null
  }

  export type RoleSumAggregateOutputType = {
    idRole: number | null
  }

  export type RoleMinAggregateOutputType = {
    idRole: number | null
    libelle: string | null
  }

  export type RoleMaxAggregateOutputType = {
    idRole: number | null
    libelle: string | null
  }

  export type RoleCountAggregateOutputType = {
    idRole: number
    libelle: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    idRole?: true
  }

  export type RoleSumAggregateInputType = {
    idRole?: true
  }

  export type RoleMinAggregateInputType = {
    idRole?: true
    libelle?: true
  }

  export type RoleMaxAggregateInputType = {
    idRole?: true
    libelle?: true
  }

  export type RoleCountAggregateInputType = {
    idRole?: true
    libelle?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    idRole: number
    libelle: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idRole?: boolean
    libelle?: boolean
    utilisateurs?: boolean | Role$utilisateursArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idRole?: boolean
    libelle?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    idRole?: boolean
    libelle?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateurs?: boolean | Role$utilisateursArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      utilisateurs: Prisma.$AvoirRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idRole: number
      libelle: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `idRole`
     * const roleWithIdRoleOnly = await prisma.role.findMany({ select: { idRole: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `idRole`
     * const roleWithIdRoleOnly = await prisma.role.createManyAndReturn({ 
     *   select: { idRole: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateurs<T extends Role$utilisateursArgs<ExtArgs> = {}>(args?: Subset<T, Role$utilisateursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly idRole: FieldRef<"Role", 'Int'>
    readonly libelle: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.utilisateurs
   */
  export type Role$utilisateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    where?: AvoirRoleWhereInput
    orderBy?: AvoirRoleOrderByWithRelationInput | AvoirRoleOrderByWithRelationInput[]
    cursor?: AvoirRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AvoirRoleScalarFieldEnum | AvoirRoleScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Conseil
   */

  export type AggregateConseil = {
    _count: ConseilCountAggregateOutputType | null
    _avg: ConseilAvgAggregateOutputType | null
    _sum: ConseilSumAggregateOutputType | null
    _min: ConseilMinAggregateOutputType | null
    _max: ConseilMaxAggregateOutputType | null
  }

  export type ConseilAvgAggregateOutputType = {
    idConseil: number | null
    idPlante: number | null
    idUtilisateur: number | null
  }

  export type ConseilSumAggregateOutputType = {
    idConseil: number | null
    idPlante: number | null
    idUtilisateur: number | null
  }

  export type ConseilMinAggregateOutputType = {
    idConseil: number | null
    description: string | null
    idPlante: number | null
    idUtilisateur: number | null
  }

  export type ConseilMaxAggregateOutputType = {
    idConseil: number | null
    description: string | null
    idPlante: number | null
    idUtilisateur: number | null
  }

  export type ConseilCountAggregateOutputType = {
    idConseil: number
    description: number
    idPlante: number
    idUtilisateur: number
    _all: number
  }


  export type ConseilAvgAggregateInputType = {
    idConseil?: true
    idPlante?: true
    idUtilisateur?: true
  }

  export type ConseilSumAggregateInputType = {
    idConseil?: true
    idPlante?: true
    idUtilisateur?: true
  }

  export type ConseilMinAggregateInputType = {
    idConseil?: true
    description?: true
    idPlante?: true
    idUtilisateur?: true
  }

  export type ConseilMaxAggregateInputType = {
    idConseil?: true
    description?: true
    idPlante?: true
    idUtilisateur?: true
  }

  export type ConseilCountAggregateInputType = {
    idConseil?: true
    description?: true
    idPlante?: true
    idUtilisateur?: true
    _all?: true
  }

  export type ConseilAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conseil to aggregate.
     */
    where?: ConseilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conseils to fetch.
     */
    orderBy?: ConseilOrderByWithRelationInput | ConseilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConseilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conseils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conseils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conseils
    **/
    _count?: true | ConseilCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConseilAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConseilSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConseilMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConseilMaxAggregateInputType
  }

  export type GetConseilAggregateType<T extends ConseilAggregateArgs> = {
        [P in keyof T & keyof AggregateConseil]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConseil[P]>
      : GetScalarType<T[P], AggregateConseil[P]>
  }




  export type ConseilGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConseilWhereInput
    orderBy?: ConseilOrderByWithAggregationInput | ConseilOrderByWithAggregationInput[]
    by: ConseilScalarFieldEnum[] | ConseilScalarFieldEnum
    having?: ConseilScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConseilCountAggregateInputType | true
    _avg?: ConseilAvgAggregateInputType
    _sum?: ConseilSumAggregateInputType
    _min?: ConseilMinAggregateInputType
    _max?: ConseilMaxAggregateInputType
  }

  export type ConseilGroupByOutputType = {
    idConseil: number
    description: string
    idPlante: number
    idUtilisateur: number
    _count: ConseilCountAggregateOutputType | null
    _avg: ConseilAvgAggregateOutputType | null
    _sum: ConseilSumAggregateOutputType | null
    _min: ConseilMinAggregateOutputType | null
    _max: ConseilMaxAggregateOutputType | null
  }

  type GetConseilGroupByPayload<T extends ConseilGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConseilGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConseilGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConseilGroupByOutputType[P]>
            : GetScalarType<T[P], ConseilGroupByOutputType[P]>
        }
      >
    >


  export type ConseilSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idConseil?: boolean
    description?: boolean
    idPlante?: boolean
    idUtilisateur?: boolean
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conseil"]>

  export type ConseilSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idConseil?: boolean
    description?: boolean
    idPlante?: boolean
    idUtilisateur?: boolean
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conseil"]>

  export type ConseilSelectScalar = {
    idConseil?: boolean
    description?: boolean
    idPlante?: boolean
    idUtilisateur?: boolean
  }

  export type ConseilInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }
  export type ConseilIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
  }

  export type $ConseilPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conseil"
    objects: {
      plante: Prisma.$PlantePayload<ExtArgs>
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idConseil: number
      description: string
      idPlante: number
      idUtilisateur: number
    }, ExtArgs["result"]["conseil"]>
    composites: {}
  }

  type ConseilGetPayload<S extends boolean | null | undefined | ConseilDefaultArgs> = $Result.GetResult<Prisma.$ConseilPayload, S>

  type ConseilCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConseilFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConseilCountAggregateInputType | true
    }

  export interface ConseilDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conseil'], meta: { name: 'Conseil' } }
    /**
     * Find zero or one Conseil that matches the filter.
     * @param {ConseilFindUniqueArgs} args - Arguments to find a Conseil
     * @example
     * // Get one Conseil
     * const conseil = await prisma.conseil.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConseilFindUniqueArgs>(args: SelectSubset<T, ConseilFindUniqueArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Conseil that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConseilFindUniqueOrThrowArgs} args - Arguments to find a Conseil
     * @example
     * // Get one Conseil
     * const conseil = await prisma.conseil.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConseilFindUniqueOrThrowArgs>(args: SelectSubset<T, ConseilFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Conseil that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConseilFindFirstArgs} args - Arguments to find a Conseil
     * @example
     * // Get one Conseil
     * const conseil = await prisma.conseil.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConseilFindFirstArgs>(args?: SelectSubset<T, ConseilFindFirstArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Conseil that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConseilFindFirstOrThrowArgs} args - Arguments to find a Conseil
     * @example
     * // Get one Conseil
     * const conseil = await prisma.conseil.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConseilFindFirstOrThrowArgs>(args?: SelectSubset<T, ConseilFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Conseils that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConseilFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conseils
     * const conseils = await prisma.conseil.findMany()
     * 
     * // Get first 10 Conseils
     * const conseils = await prisma.conseil.findMany({ take: 10 })
     * 
     * // Only select the `idConseil`
     * const conseilWithIdConseilOnly = await prisma.conseil.findMany({ select: { idConseil: true } })
     * 
     */
    findMany<T extends ConseilFindManyArgs>(args?: SelectSubset<T, ConseilFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Conseil.
     * @param {ConseilCreateArgs} args - Arguments to create a Conseil.
     * @example
     * // Create one Conseil
     * const Conseil = await prisma.conseil.create({
     *   data: {
     *     // ... data to create a Conseil
     *   }
     * })
     * 
     */
    create<T extends ConseilCreateArgs>(args: SelectSubset<T, ConseilCreateArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Conseils.
     * @param {ConseilCreateManyArgs} args - Arguments to create many Conseils.
     * @example
     * // Create many Conseils
     * const conseil = await prisma.conseil.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConseilCreateManyArgs>(args?: SelectSubset<T, ConseilCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conseils and returns the data saved in the database.
     * @param {ConseilCreateManyAndReturnArgs} args - Arguments to create many Conseils.
     * @example
     * // Create many Conseils
     * const conseil = await prisma.conseil.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conseils and only return the `idConseil`
     * const conseilWithIdConseilOnly = await prisma.conseil.createManyAndReturn({ 
     *   select: { idConseil: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConseilCreateManyAndReturnArgs>(args?: SelectSubset<T, ConseilCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Conseil.
     * @param {ConseilDeleteArgs} args - Arguments to delete one Conseil.
     * @example
     * // Delete one Conseil
     * const Conseil = await prisma.conseil.delete({
     *   where: {
     *     // ... filter to delete one Conseil
     *   }
     * })
     * 
     */
    delete<T extends ConseilDeleteArgs>(args: SelectSubset<T, ConseilDeleteArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Conseil.
     * @param {ConseilUpdateArgs} args - Arguments to update one Conseil.
     * @example
     * // Update one Conseil
     * const conseil = await prisma.conseil.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConseilUpdateArgs>(args: SelectSubset<T, ConseilUpdateArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Conseils.
     * @param {ConseilDeleteManyArgs} args - Arguments to filter Conseils to delete.
     * @example
     * // Delete a few Conseils
     * const { count } = await prisma.conseil.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConseilDeleteManyArgs>(args?: SelectSubset<T, ConseilDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conseils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConseilUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conseils
     * const conseil = await prisma.conseil.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConseilUpdateManyArgs>(args: SelectSubset<T, ConseilUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conseil.
     * @param {ConseilUpsertArgs} args - Arguments to update or create a Conseil.
     * @example
     * // Update or create a Conseil
     * const conseil = await prisma.conseil.upsert({
     *   create: {
     *     // ... data to create a Conseil
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conseil we want to update
     *   }
     * })
     */
    upsert<T extends ConseilUpsertArgs>(args: SelectSubset<T, ConseilUpsertArgs<ExtArgs>>): Prisma__ConseilClient<$Result.GetResult<Prisma.$ConseilPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Conseils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConseilCountArgs} args - Arguments to filter Conseils to count.
     * @example
     * // Count the number of Conseils
     * const count = await prisma.conseil.count({
     *   where: {
     *     // ... the filter for the Conseils we want to count
     *   }
     * })
    **/
    count<T extends ConseilCountArgs>(
      args?: Subset<T, ConseilCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConseilCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conseil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConseilAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConseilAggregateArgs>(args: Subset<T, ConseilAggregateArgs>): Prisma.PrismaPromise<GetConseilAggregateType<T>>

    /**
     * Group by Conseil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConseilGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConseilGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConseilGroupByArgs['orderBy'] }
        : { orderBy?: ConseilGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConseilGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConseilGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conseil model
   */
  readonly fields: ConseilFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conseil.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConseilClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plante<T extends PlanteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanteDefaultArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conseil model
   */ 
  interface ConseilFieldRefs {
    readonly idConseil: FieldRef<"Conseil", 'Int'>
    readonly description: FieldRef<"Conseil", 'String'>
    readonly idPlante: FieldRef<"Conseil", 'Int'>
    readonly idUtilisateur: FieldRef<"Conseil", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Conseil findUnique
   */
  export type ConseilFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * Filter, which Conseil to fetch.
     */
    where: ConseilWhereUniqueInput
  }

  /**
   * Conseil findUniqueOrThrow
   */
  export type ConseilFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * Filter, which Conseil to fetch.
     */
    where: ConseilWhereUniqueInput
  }

  /**
   * Conseil findFirst
   */
  export type ConseilFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * Filter, which Conseil to fetch.
     */
    where?: ConseilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conseils to fetch.
     */
    orderBy?: ConseilOrderByWithRelationInput | ConseilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conseils.
     */
    cursor?: ConseilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conseils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conseils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conseils.
     */
    distinct?: ConseilScalarFieldEnum | ConseilScalarFieldEnum[]
  }

  /**
   * Conseil findFirstOrThrow
   */
  export type ConseilFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * Filter, which Conseil to fetch.
     */
    where?: ConseilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conseils to fetch.
     */
    orderBy?: ConseilOrderByWithRelationInput | ConseilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conseils.
     */
    cursor?: ConseilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conseils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conseils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conseils.
     */
    distinct?: ConseilScalarFieldEnum | ConseilScalarFieldEnum[]
  }

  /**
   * Conseil findMany
   */
  export type ConseilFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * Filter, which Conseils to fetch.
     */
    where?: ConseilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conseils to fetch.
     */
    orderBy?: ConseilOrderByWithRelationInput | ConseilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conseils.
     */
    cursor?: ConseilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conseils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conseils.
     */
    skip?: number
    distinct?: ConseilScalarFieldEnum | ConseilScalarFieldEnum[]
  }

  /**
   * Conseil create
   */
  export type ConseilCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * The data needed to create a Conseil.
     */
    data: XOR<ConseilCreateInput, ConseilUncheckedCreateInput>
  }

  /**
   * Conseil createMany
   */
  export type ConseilCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conseils.
     */
    data: ConseilCreateManyInput | ConseilCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Conseil createManyAndReturn
   */
  export type ConseilCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Conseils.
     */
    data: ConseilCreateManyInput | ConseilCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Conseil update
   */
  export type ConseilUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * The data needed to update a Conseil.
     */
    data: XOR<ConseilUpdateInput, ConseilUncheckedUpdateInput>
    /**
     * Choose, which Conseil to update.
     */
    where: ConseilWhereUniqueInput
  }

  /**
   * Conseil updateMany
   */
  export type ConseilUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conseils.
     */
    data: XOR<ConseilUpdateManyMutationInput, ConseilUncheckedUpdateManyInput>
    /**
     * Filter which Conseils to update
     */
    where?: ConseilWhereInput
  }

  /**
   * Conseil upsert
   */
  export type ConseilUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * The filter to search for the Conseil to update in case it exists.
     */
    where: ConseilWhereUniqueInput
    /**
     * In case the Conseil found by the `where` argument doesn't exist, create a new Conseil with this data.
     */
    create: XOR<ConseilCreateInput, ConseilUncheckedCreateInput>
    /**
     * In case the Conseil was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConseilUpdateInput, ConseilUncheckedUpdateInput>
  }

  /**
   * Conseil delete
   */
  export type ConseilDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
    /**
     * Filter which Conseil to delete.
     */
    where: ConseilWhereUniqueInput
  }

  /**
   * Conseil deleteMany
   */
  export type ConseilDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conseils to delete
     */
    where?: ConseilWhereInput
  }

  /**
   * Conseil without action
   */
  export type ConseilDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conseil
     */
    select?: ConseilSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConseilInclude<ExtArgs> | null
  }


  /**
   * Model Gardiennage
   */

  export type AggregateGardiennage = {
    _count: GardiennageCountAggregateOutputType | null
    _avg: GardiennageAvgAggregateOutputType | null
    _sum: GardiennageSumAggregateOutputType | null
    _min: GardiennageMinAggregateOutputType | null
    _max: GardiennageMaxAggregateOutputType | null
  }

  export type GardiennageAvgAggregateOutputType = {
    idGardiennage: number | null
    idUtilisateur: number | null
    idPlante: number | null
  }

  export type GardiennageSumAggregateOutputType = {
    idGardiennage: number | null
    idUtilisateur: number | null
    idPlante: number | null
  }

  export type GardiennageMinAggregateOutputType = {
    idGardiennage: number | null
    dateDebut: Date | null
    dateFin: Date | null
    idUtilisateur: number | null
    idPlante: number | null
  }

  export type GardiennageMaxAggregateOutputType = {
    idGardiennage: number | null
    dateDebut: Date | null
    dateFin: Date | null
    idUtilisateur: number | null
    idPlante: number | null
  }

  export type GardiennageCountAggregateOutputType = {
    idGardiennage: number
    dateDebut: number
    dateFin: number
    idUtilisateur: number
    idPlante: number
    _all: number
  }


  export type GardiennageAvgAggregateInputType = {
    idGardiennage?: true
    idUtilisateur?: true
    idPlante?: true
  }

  export type GardiennageSumAggregateInputType = {
    idGardiennage?: true
    idUtilisateur?: true
    idPlante?: true
  }

  export type GardiennageMinAggregateInputType = {
    idGardiennage?: true
    dateDebut?: true
    dateFin?: true
    idUtilisateur?: true
    idPlante?: true
  }

  export type GardiennageMaxAggregateInputType = {
    idGardiennage?: true
    dateDebut?: true
    dateFin?: true
    idUtilisateur?: true
    idPlante?: true
  }

  export type GardiennageCountAggregateInputType = {
    idGardiennage?: true
    dateDebut?: true
    dateFin?: true
    idUtilisateur?: true
    idPlante?: true
    _all?: true
  }

  export type GardiennageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gardiennage to aggregate.
     */
    where?: GardiennageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gardiennages to fetch.
     */
    orderBy?: GardiennageOrderByWithRelationInput | GardiennageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GardiennageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gardiennages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gardiennages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gardiennages
    **/
    _count?: true | GardiennageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GardiennageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GardiennageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GardiennageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GardiennageMaxAggregateInputType
  }

  export type GetGardiennageAggregateType<T extends GardiennageAggregateArgs> = {
        [P in keyof T & keyof AggregateGardiennage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGardiennage[P]>
      : GetScalarType<T[P], AggregateGardiennage[P]>
  }




  export type GardiennageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GardiennageWhereInput
    orderBy?: GardiennageOrderByWithAggregationInput | GardiennageOrderByWithAggregationInput[]
    by: GardiennageScalarFieldEnum[] | GardiennageScalarFieldEnum
    having?: GardiennageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GardiennageCountAggregateInputType | true
    _avg?: GardiennageAvgAggregateInputType
    _sum?: GardiennageSumAggregateInputType
    _min?: GardiennageMinAggregateInputType
    _max?: GardiennageMaxAggregateInputType
  }

  export type GardiennageGroupByOutputType = {
    idGardiennage: number
    dateDebut: Date
    dateFin: Date
    idUtilisateur: number | null
    idPlante: number
    _count: GardiennageCountAggregateOutputType | null
    _avg: GardiennageAvgAggregateOutputType | null
    _sum: GardiennageSumAggregateOutputType | null
    _min: GardiennageMinAggregateOutputType | null
    _max: GardiennageMaxAggregateOutputType | null
  }

  type GetGardiennageGroupByPayload<T extends GardiennageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GardiennageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GardiennageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GardiennageGroupByOutputType[P]>
            : GetScalarType<T[P], GardiennageGroupByOutputType[P]>
        }
      >
    >


  export type GardiennageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idGardiennage?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    idUtilisateur?: boolean
    idPlante?: boolean
    utilisateur?: boolean | Gardiennage$utilisateurArgs<ExtArgs>
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
    conversation?: boolean | Gardiennage$conversationArgs<ExtArgs>
  }, ExtArgs["result"]["gardiennage"]>

  export type GardiennageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idGardiennage?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    idUtilisateur?: boolean
    idPlante?: boolean
    utilisateur?: boolean | Gardiennage$utilisateurArgs<ExtArgs>
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gardiennage"]>

  export type GardiennageSelectScalar = {
    idGardiennage?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    idUtilisateur?: boolean
    idPlante?: boolean
  }

  export type GardiennageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | Gardiennage$utilisateurArgs<ExtArgs>
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
    conversation?: boolean | Gardiennage$conversationArgs<ExtArgs>
  }
  export type GardiennageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | Gardiennage$utilisateurArgs<ExtArgs>
    plante?: boolean | PlanteDefaultArgs<ExtArgs>
  }

  export type $GardiennagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gardiennage"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs> | null
      plante: Prisma.$PlantePayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      idGardiennage: number
      dateDebut: Date
      dateFin: Date
      idUtilisateur: number | null
      idPlante: number
    }, ExtArgs["result"]["gardiennage"]>
    composites: {}
  }

  type GardiennageGetPayload<S extends boolean | null | undefined | GardiennageDefaultArgs> = $Result.GetResult<Prisma.$GardiennagePayload, S>

  type GardiennageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GardiennageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GardiennageCountAggregateInputType | true
    }

  export interface GardiennageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gardiennage'], meta: { name: 'Gardiennage' } }
    /**
     * Find zero or one Gardiennage that matches the filter.
     * @param {GardiennageFindUniqueArgs} args - Arguments to find a Gardiennage
     * @example
     * // Get one Gardiennage
     * const gardiennage = await prisma.gardiennage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GardiennageFindUniqueArgs>(args: SelectSubset<T, GardiennageFindUniqueArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Gardiennage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GardiennageFindUniqueOrThrowArgs} args - Arguments to find a Gardiennage
     * @example
     * // Get one Gardiennage
     * const gardiennage = await prisma.gardiennage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GardiennageFindUniqueOrThrowArgs>(args: SelectSubset<T, GardiennageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Gardiennage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GardiennageFindFirstArgs} args - Arguments to find a Gardiennage
     * @example
     * // Get one Gardiennage
     * const gardiennage = await prisma.gardiennage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GardiennageFindFirstArgs>(args?: SelectSubset<T, GardiennageFindFirstArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Gardiennage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GardiennageFindFirstOrThrowArgs} args - Arguments to find a Gardiennage
     * @example
     * // Get one Gardiennage
     * const gardiennage = await prisma.gardiennage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GardiennageFindFirstOrThrowArgs>(args?: SelectSubset<T, GardiennageFindFirstOrThrowArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Gardiennages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GardiennageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gardiennages
     * const gardiennages = await prisma.gardiennage.findMany()
     * 
     * // Get first 10 Gardiennages
     * const gardiennages = await prisma.gardiennage.findMany({ take: 10 })
     * 
     * // Only select the `idGardiennage`
     * const gardiennageWithIdGardiennageOnly = await prisma.gardiennage.findMany({ select: { idGardiennage: true } })
     * 
     */
    findMany<T extends GardiennageFindManyArgs>(args?: SelectSubset<T, GardiennageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Gardiennage.
     * @param {GardiennageCreateArgs} args - Arguments to create a Gardiennage.
     * @example
     * // Create one Gardiennage
     * const Gardiennage = await prisma.gardiennage.create({
     *   data: {
     *     // ... data to create a Gardiennage
     *   }
     * })
     * 
     */
    create<T extends GardiennageCreateArgs>(args: SelectSubset<T, GardiennageCreateArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Gardiennages.
     * @param {GardiennageCreateManyArgs} args - Arguments to create many Gardiennages.
     * @example
     * // Create many Gardiennages
     * const gardiennage = await prisma.gardiennage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GardiennageCreateManyArgs>(args?: SelectSubset<T, GardiennageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gardiennages and returns the data saved in the database.
     * @param {GardiennageCreateManyAndReturnArgs} args - Arguments to create many Gardiennages.
     * @example
     * // Create many Gardiennages
     * const gardiennage = await prisma.gardiennage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gardiennages and only return the `idGardiennage`
     * const gardiennageWithIdGardiennageOnly = await prisma.gardiennage.createManyAndReturn({ 
     *   select: { idGardiennage: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GardiennageCreateManyAndReturnArgs>(args?: SelectSubset<T, GardiennageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Gardiennage.
     * @param {GardiennageDeleteArgs} args - Arguments to delete one Gardiennage.
     * @example
     * // Delete one Gardiennage
     * const Gardiennage = await prisma.gardiennage.delete({
     *   where: {
     *     // ... filter to delete one Gardiennage
     *   }
     * })
     * 
     */
    delete<T extends GardiennageDeleteArgs>(args: SelectSubset<T, GardiennageDeleteArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Gardiennage.
     * @param {GardiennageUpdateArgs} args - Arguments to update one Gardiennage.
     * @example
     * // Update one Gardiennage
     * const gardiennage = await prisma.gardiennage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GardiennageUpdateArgs>(args: SelectSubset<T, GardiennageUpdateArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Gardiennages.
     * @param {GardiennageDeleteManyArgs} args - Arguments to filter Gardiennages to delete.
     * @example
     * // Delete a few Gardiennages
     * const { count } = await prisma.gardiennage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GardiennageDeleteManyArgs>(args?: SelectSubset<T, GardiennageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gardiennages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GardiennageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gardiennages
     * const gardiennage = await prisma.gardiennage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GardiennageUpdateManyArgs>(args: SelectSubset<T, GardiennageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gardiennage.
     * @param {GardiennageUpsertArgs} args - Arguments to update or create a Gardiennage.
     * @example
     * // Update or create a Gardiennage
     * const gardiennage = await prisma.gardiennage.upsert({
     *   create: {
     *     // ... data to create a Gardiennage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gardiennage we want to update
     *   }
     * })
     */
    upsert<T extends GardiennageUpsertArgs>(args: SelectSubset<T, GardiennageUpsertArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Gardiennages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GardiennageCountArgs} args - Arguments to filter Gardiennages to count.
     * @example
     * // Count the number of Gardiennages
     * const count = await prisma.gardiennage.count({
     *   where: {
     *     // ... the filter for the Gardiennages we want to count
     *   }
     * })
    **/
    count<T extends GardiennageCountArgs>(
      args?: Subset<T, GardiennageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GardiennageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gardiennage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GardiennageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GardiennageAggregateArgs>(args: Subset<T, GardiennageAggregateArgs>): Prisma.PrismaPromise<GetGardiennageAggregateType<T>>

    /**
     * Group by Gardiennage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GardiennageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GardiennageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GardiennageGroupByArgs['orderBy'] }
        : { orderBy?: GardiennageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GardiennageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGardiennageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gardiennage model
   */
  readonly fields: GardiennageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gardiennage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GardiennageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends Gardiennage$utilisateurArgs<ExtArgs> = {}>(args?: Subset<T, Gardiennage$utilisateurArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    plante<T extends PlanteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanteDefaultArgs<ExtArgs>>): Prisma__PlanteClient<$Result.GetResult<Prisma.$PlantePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends Gardiennage$conversationArgs<ExtArgs> = {}>(args?: Subset<T, Gardiennage$conversationArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gardiennage model
   */ 
  interface GardiennageFieldRefs {
    readonly idGardiennage: FieldRef<"Gardiennage", 'Int'>
    readonly dateDebut: FieldRef<"Gardiennage", 'DateTime'>
    readonly dateFin: FieldRef<"Gardiennage", 'DateTime'>
    readonly idUtilisateur: FieldRef<"Gardiennage", 'Int'>
    readonly idPlante: FieldRef<"Gardiennage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Gardiennage findUnique
   */
  export type GardiennageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * Filter, which Gardiennage to fetch.
     */
    where: GardiennageWhereUniqueInput
  }

  /**
   * Gardiennage findUniqueOrThrow
   */
  export type GardiennageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * Filter, which Gardiennage to fetch.
     */
    where: GardiennageWhereUniqueInput
  }

  /**
   * Gardiennage findFirst
   */
  export type GardiennageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * Filter, which Gardiennage to fetch.
     */
    where?: GardiennageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gardiennages to fetch.
     */
    orderBy?: GardiennageOrderByWithRelationInput | GardiennageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gardiennages.
     */
    cursor?: GardiennageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gardiennages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gardiennages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gardiennages.
     */
    distinct?: GardiennageScalarFieldEnum | GardiennageScalarFieldEnum[]
  }

  /**
   * Gardiennage findFirstOrThrow
   */
  export type GardiennageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * Filter, which Gardiennage to fetch.
     */
    where?: GardiennageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gardiennages to fetch.
     */
    orderBy?: GardiennageOrderByWithRelationInput | GardiennageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gardiennages.
     */
    cursor?: GardiennageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gardiennages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gardiennages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gardiennages.
     */
    distinct?: GardiennageScalarFieldEnum | GardiennageScalarFieldEnum[]
  }

  /**
   * Gardiennage findMany
   */
  export type GardiennageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * Filter, which Gardiennages to fetch.
     */
    where?: GardiennageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gardiennages to fetch.
     */
    orderBy?: GardiennageOrderByWithRelationInput | GardiennageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gardiennages.
     */
    cursor?: GardiennageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gardiennages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gardiennages.
     */
    skip?: number
    distinct?: GardiennageScalarFieldEnum | GardiennageScalarFieldEnum[]
  }

  /**
   * Gardiennage create
   */
  export type GardiennageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * The data needed to create a Gardiennage.
     */
    data: XOR<GardiennageCreateInput, GardiennageUncheckedCreateInput>
  }

  /**
   * Gardiennage createMany
   */
  export type GardiennageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gardiennages.
     */
    data: GardiennageCreateManyInput | GardiennageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gardiennage createManyAndReturn
   */
  export type GardiennageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Gardiennages.
     */
    data: GardiennageCreateManyInput | GardiennageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gardiennage update
   */
  export type GardiennageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * The data needed to update a Gardiennage.
     */
    data: XOR<GardiennageUpdateInput, GardiennageUncheckedUpdateInput>
    /**
     * Choose, which Gardiennage to update.
     */
    where: GardiennageWhereUniqueInput
  }

  /**
   * Gardiennage updateMany
   */
  export type GardiennageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gardiennages.
     */
    data: XOR<GardiennageUpdateManyMutationInput, GardiennageUncheckedUpdateManyInput>
    /**
     * Filter which Gardiennages to update
     */
    where?: GardiennageWhereInput
  }

  /**
   * Gardiennage upsert
   */
  export type GardiennageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * The filter to search for the Gardiennage to update in case it exists.
     */
    where: GardiennageWhereUniqueInput
    /**
     * In case the Gardiennage found by the `where` argument doesn't exist, create a new Gardiennage with this data.
     */
    create: XOR<GardiennageCreateInput, GardiennageUncheckedCreateInput>
    /**
     * In case the Gardiennage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GardiennageUpdateInput, GardiennageUncheckedUpdateInput>
  }

  /**
   * Gardiennage delete
   */
  export type GardiennageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
    /**
     * Filter which Gardiennage to delete.
     */
    where: GardiennageWhereUniqueInput
  }

  /**
   * Gardiennage deleteMany
   */
  export type GardiennageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gardiennages to delete
     */
    where?: GardiennageWhereInput
  }

  /**
   * Gardiennage.utilisateur
   */
  export type Gardiennage$utilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilisateurInclude<ExtArgs> | null
    where?: UtilisateurWhereInput
  }

  /**
   * Gardiennage.conversation
   */
  export type Gardiennage$conversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
  }

  /**
   * Gardiennage without action
   */
  export type GardiennageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gardiennage
     */
    select?: GardiennageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GardiennageInclude<ExtArgs> | null
  }


  /**
   * Model Conversation
   */

  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationAvgAggregateOutputType = {
    idConversation: number | null
    idUtilisateur: number | null
    idUtilisateur_1: number | null
    idGardiennage: number | null
  }

  export type ConversationSumAggregateOutputType = {
    idConversation: number | null
    idUtilisateur: number | null
    idUtilisateur_1: number | null
    idGardiennage: number | null
  }

  export type ConversationMinAggregateOutputType = {
    idConversation: number | null
    idUtilisateur: number | null
    idUtilisateur_1: number | null
    idGardiennage: number | null
  }

  export type ConversationMaxAggregateOutputType = {
    idConversation: number | null
    idUtilisateur: number | null
    idUtilisateur_1: number | null
    idGardiennage: number | null
  }

  export type ConversationCountAggregateOutputType = {
    idConversation: number
    idUtilisateur: number
    idUtilisateur_1: number
    idGardiennage: number
    _all: number
  }


  export type ConversationAvgAggregateInputType = {
    idConversation?: true
    idUtilisateur?: true
    idUtilisateur_1?: true
    idGardiennage?: true
  }

  export type ConversationSumAggregateInputType = {
    idConversation?: true
    idUtilisateur?: true
    idUtilisateur_1?: true
    idGardiennage?: true
  }

  export type ConversationMinAggregateInputType = {
    idConversation?: true
    idUtilisateur?: true
    idUtilisateur_1?: true
    idGardiennage?: true
  }

  export type ConversationMaxAggregateInputType = {
    idConversation?: true
    idUtilisateur?: true
    idUtilisateur_1?: true
    idGardiennage?: true
  }

  export type ConversationCountAggregateInputType = {
    idConversation?: true
    idUtilisateur?: true
    idUtilisateur_1?: true
    idGardiennage?: true
    _all?: true
  }

  export type ConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversation to aggregate.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConversationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConversationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithAggregationInput | ConversationOrderByWithAggregationInput[]
    by: ConversationScalarFieldEnum[] | ConversationScalarFieldEnum
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _avg?: ConversationAvgAggregateInputType
    _sum?: ConversationSumAggregateInputType
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }

  export type ConversationGroupByOutputType = {
    idConversation: number
    idUtilisateur: number
    idUtilisateur_1: number
    idGardiennage: number
    _count: ConversationCountAggregateOutputType | null
    _avg: ConversationAvgAggregateOutputType | null
    _sum: ConversationSumAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idConversation?: boolean
    idUtilisateur?: boolean
    idUtilisateur_1?: boolean
    idGardiennage?: boolean
    membre1?: boolean | UtilisateurDefaultArgs<ExtArgs>
    membre2?: boolean | UtilisateurDefaultArgs<ExtArgs>
    gardiennage?: boolean | GardiennageDefaultArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idConversation?: boolean
    idUtilisateur?: boolean
    idUtilisateur_1?: boolean
    idGardiennage?: boolean
    membre1?: boolean | UtilisateurDefaultArgs<ExtArgs>
    membre2?: boolean | UtilisateurDefaultArgs<ExtArgs>
    gardiennage?: boolean | GardiennageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectScalar = {
    idConversation?: boolean
    idUtilisateur?: boolean
    idUtilisateur_1?: boolean
    idGardiennage?: boolean
  }

  export type ConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membre1?: boolean | UtilisateurDefaultArgs<ExtArgs>
    membre2?: boolean | UtilisateurDefaultArgs<ExtArgs>
    gardiennage?: boolean | GardiennageDefaultArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConversationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membre1?: boolean | UtilisateurDefaultArgs<ExtArgs>
    membre2?: boolean | UtilisateurDefaultArgs<ExtArgs>
    gardiennage?: boolean | GardiennageDefaultArgs<ExtArgs>
  }

  export type $ConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conversation"
    objects: {
      membre1: Prisma.$UtilisateurPayload<ExtArgs>
      membre2: Prisma.$UtilisateurPayload<ExtArgs>
      gardiennage: Prisma.$GardiennagePayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idConversation: number
      idUtilisateur: number
      idUtilisateur_1: number
      idGardiennage: number
    }, ExtArgs["result"]["conversation"]>
    composites: {}
  }

  type ConversationGetPayload<S extends boolean | null | undefined | ConversationDefaultArgs> = $Result.GetResult<Prisma.$ConversationPayload, S>

  type ConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConversationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConversationCountAggregateInputType | true
    }

  export interface ConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conversation'], meta: { name: 'Conversation' } }
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationFindUniqueArgs>(args: SelectSubset<T, ConversationFindUniqueArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Conversation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationFindFirstArgs>(args?: SelectSubset<T, ConversationFindFirstArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Conversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `idConversation`
     * const conversationWithIdConversationOnly = await prisma.conversation.findMany({ select: { idConversation: true } })
     * 
     */
    findMany<T extends ConversationFindManyArgs>(args?: SelectSubset<T, ConversationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
     */
    create<T extends ConversationCreateArgs>(args: SelectSubset<T, ConversationCreateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Conversations.
     * @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationCreateManyArgs>(args?: SelectSubset<T, ConversationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conversations and returns the data saved in the database.
     * @param {ConversationCreateManyAndReturnArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conversations and only return the `idConversation`
     * const conversationWithIdConversationOnly = await prisma.conversation.createManyAndReturn({ 
     *   select: { idConversation: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConversationCreateManyAndReturnArgs>(args?: SelectSubset<T, ConversationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
     */
    delete<T extends ConversationDeleteArgs>(args: SelectSubset<T, ConversationDeleteArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationUpdateArgs>(args: SelectSubset<T, ConversationUpdateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationDeleteManyArgs>(args?: SelectSubset<T, ConversationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationUpdateManyArgs>(args: SelectSubset<T, ConversationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
     */
    upsert<T extends ConversationUpsertArgs>(args: SelectSubset<T, ConversationUpsertArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): Prisma.PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conversation model
   */
  readonly fields: ConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membre1<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    membre2<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    gardiennage<T extends GardiennageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GardiennageDefaultArgs<ExtArgs>>): Prisma__GardiennageClient<$Result.GetResult<Prisma.$GardiennagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    messages<T extends Conversation$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conversation model
   */ 
  interface ConversationFieldRefs {
    readonly idConversation: FieldRef<"Conversation", 'Int'>
    readonly idUtilisateur: FieldRef<"Conversation", 'Int'>
    readonly idUtilisateur_1: FieldRef<"Conversation", 'Int'>
    readonly idGardiennage: FieldRef<"Conversation", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversations to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation create
   */
  export type ConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a Conversation.
     */
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }

  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Conversation createManyAndReturn
   */
  export type ConversationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Conversation update
   */
  export type ConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a Conversation.
     */
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     */
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     */
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }

  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter which Conversation to delete.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversations to delete
     */
    where?: ConversationWhereInput
  }

  /**
   * Conversation.messages
   */
  export type Conversation$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Conversation without action
   */
  export type ConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    idMessage: number | null
    idUtilisateur: number | null
    idConversation: number | null
  }

  export type MessageSumAggregateOutputType = {
    idMessage: number | null
    idUtilisateur: number | null
    idConversation: number | null
  }

  export type MessageMinAggregateOutputType = {
    idMessage: number | null
    dateEnvoi: string | null
    texte: string | null
    image: string | null
    idUtilisateur: number | null
    idConversation: number | null
  }

  export type MessageMaxAggregateOutputType = {
    idMessage: number | null
    dateEnvoi: string | null
    texte: string | null
    image: string | null
    idUtilisateur: number | null
    idConversation: number | null
  }

  export type MessageCountAggregateOutputType = {
    idMessage: number
    dateEnvoi: number
    texte: number
    image: number
    idUtilisateur: number
    idConversation: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    idMessage?: true
    idUtilisateur?: true
    idConversation?: true
  }

  export type MessageSumAggregateInputType = {
    idMessage?: true
    idUtilisateur?: true
    idConversation?: true
  }

  export type MessageMinAggregateInputType = {
    idMessage?: true
    dateEnvoi?: true
    texte?: true
    image?: true
    idUtilisateur?: true
    idConversation?: true
  }

  export type MessageMaxAggregateInputType = {
    idMessage?: true
    dateEnvoi?: true
    texte?: true
    image?: true
    idUtilisateur?: true
    idConversation?: true
  }

  export type MessageCountAggregateInputType = {
    idMessage?: true
    dateEnvoi?: true
    texte?: true
    image?: true
    idUtilisateur?: true
    idConversation?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    idMessage: number
    dateEnvoi: string
    texte: string
    image: string | null
    idUtilisateur: number
    idConversation: number
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idMessage?: boolean
    dateEnvoi?: boolean
    texte?: boolean
    image?: boolean
    idUtilisateur?: boolean
    idConversation?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idMessage?: boolean
    dateEnvoi?: boolean
    texte?: boolean
    image?: boolean
    idUtilisateur?: boolean
    idConversation?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    idMessage?: boolean
    dateEnvoi?: boolean
    texte?: boolean
    image?: boolean
    idUtilisateur?: boolean
    idConversation?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      conversation: Prisma.$ConversationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idMessage: number
      dateEnvoi: string
      texte: string
      image: string | null
      idUtilisateur: number
      idConversation: number
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `idMessage`
     * const messageWithIdMessageOnly = await prisma.message.findMany({ select: { idMessage: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `idMessage`
     * const messageWithIdMessageOnly = await prisma.message.createManyAndReturn({ 
     *   select: { idMessage: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly idMessage: FieldRef<"Message", 'Int'>
    readonly dateEnvoi: FieldRef<"Message", 'String'>
    readonly texte: FieldRef<"Message", 'String'>
    readonly image: FieldRef<"Message", 'String'>
    readonly idUtilisateur: FieldRef<"Message", 'Int'>
    readonly idConversation: FieldRef<"Message", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model AvoirRole
   */

  export type AggregateAvoirRole = {
    _count: AvoirRoleCountAggregateOutputType | null
    _avg: AvoirRoleAvgAggregateOutputType | null
    _sum: AvoirRoleSumAggregateOutputType | null
    _min: AvoirRoleMinAggregateOutputType | null
    _max: AvoirRoleMaxAggregateOutputType | null
  }

  export type AvoirRoleAvgAggregateOutputType = {
    idUtilisateur: number | null
    idRole: number | null
  }

  export type AvoirRoleSumAggregateOutputType = {
    idUtilisateur: number | null
    idRole: number | null
  }

  export type AvoirRoleMinAggregateOutputType = {
    idUtilisateur: number | null
    idRole: number | null
  }

  export type AvoirRoleMaxAggregateOutputType = {
    idUtilisateur: number | null
    idRole: number | null
  }

  export type AvoirRoleCountAggregateOutputType = {
    idUtilisateur: number
    idRole: number
    _all: number
  }


  export type AvoirRoleAvgAggregateInputType = {
    idUtilisateur?: true
    idRole?: true
  }

  export type AvoirRoleSumAggregateInputType = {
    idUtilisateur?: true
    idRole?: true
  }

  export type AvoirRoleMinAggregateInputType = {
    idUtilisateur?: true
    idRole?: true
  }

  export type AvoirRoleMaxAggregateInputType = {
    idUtilisateur?: true
    idRole?: true
  }

  export type AvoirRoleCountAggregateInputType = {
    idUtilisateur?: true
    idRole?: true
    _all?: true
  }

  export type AvoirRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AvoirRole to aggregate.
     */
    where?: AvoirRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvoirRoles to fetch.
     */
    orderBy?: AvoirRoleOrderByWithRelationInput | AvoirRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvoirRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvoirRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvoirRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AvoirRoles
    **/
    _count?: true | AvoirRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvoirRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvoirRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvoirRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvoirRoleMaxAggregateInputType
  }

  export type GetAvoirRoleAggregateType<T extends AvoirRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateAvoirRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvoirRole[P]>
      : GetScalarType<T[P], AggregateAvoirRole[P]>
  }




  export type AvoirRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvoirRoleWhereInput
    orderBy?: AvoirRoleOrderByWithAggregationInput | AvoirRoleOrderByWithAggregationInput[]
    by: AvoirRoleScalarFieldEnum[] | AvoirRoleScalarFieldEnum
    having?: AvoirRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvoirRoleCountAggregateInputType | true
    _avg?: AvoirRoleAvgAggregateInputType
    _sum?: AvoirRoleSumAggregateInputType
    _min?: AvoirRoleMinAggregateInputType
    _max?: AvoirRoleMaxAggregateInputType
  }

  export type AvoirRoleGroupByOutputType = {
    idUtilisateur: number
    idRole: number
    _count: AvoirRoleCountAggregateOutputType | null
    _avg: AvoirRoleAvgAggregateOutputType | null
    _sum: AvoirRoleSumAggregateOutputType | null
    _min: AvoirRoleMinAggregateOutputType | null
    _max: AvoirRoleMaxAggregateOutputType | null
  }

  type GetAvoirRoleGroupByPayload<T extends AvoirRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvoirRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvoirRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvoirRoleGroupByOutputType[P]>
            : GetScalarType<T[P], AvoirRoleGroupByOutputType[P]>
        }
      >
    >


  export type AvoirRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUtilisateur?: boolean
    idRole?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avoirRole"]>

  export type AvoirRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUtilisateur?: boolean
    idRole?: boolean
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avoirRole"]>

  export type AvoirRoleSelectScalar = {
    idUtilisateur?: boolean
    idRole?: boolean
  }

  export type AvoirRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type AvoirRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilisateur?: boolean | UtilisateurDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $AvoirRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AvoirRole"
    objects: {
      utilisateur: Prisma.$UtilisateurPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idUtilisateur: number
      idRole: number
    }, ExtArgs["result"]["avoirRole"]>
    composites: {}
  }

  type AvoirRoleGetPayload<S extends boolean | null | undefined | AvoirRoleDefaultArgs> = $Result.GetResult<Prisma.$AvoirRolePayload, S>

  type AvoirRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AvoirRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AvoirRoleCountAggregateInputType | true
    }

  export interface AvoirRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AvoirRole'], meta: { name: 'AvoirRole' } }
    /**
     * Find zero or one AvoirRole that matches the filter.
     * @param {AvoirRoleFindUniqueArgs} args - Arguments to find a AvoirRole
     * @example
     * // Get one AvoirRole
     * const avoirRole = await prisma.avoirRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AvoirRoleFindUniqueArgs>(args: SelectSubset<T, AvoirRoleFindUniqueArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AvoirRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AvoirRoleFindUniqueOrThrowArgs} args - Arguments to find a AvoirRole
     * @example
     * // Get one AvoirRole
     * const avoirRole = await prisma.avoirRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AvoirRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, AvoirRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AvoirRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvoirRoleFindFirstArgs} args - Arguments to find a AvoirRole
     * @example
     * // Get one AvoirRole
     * const avoirRole = await prisma.avoirRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AvoirRoleFindFirstArgs>(args?: SelectSubset<T, AvoirRoleFindFirstArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AvoirRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvoirRoleFindFirstOrThrowArgs} args - Arguments to find a AvoirRole
     * @example
     * // Get one AvoirRole
     * const avoirRole = await prisma.avoirRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AvoirRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, AvoirRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AvoirRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvoirRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AvoirRoles
     * const avoirRoles = await prisma.avoirRole.findMany()
     * 
     * // Get first 10 AvoirRoles
     * const avoirRoles = await prisma.avoirRole.findMany({ take: 10 })
     * 
     * // Only select the `idUtilisateur`
     * const avoirRoleWithIdUtilisateurOnly = await prisma.avoirRole.findMany({ select: { idUtilisateur: true } })
     * 
     */
    findMany<T extends AvoirRoleFindManyArgs>(args?: SelectSubset<T, AvoirRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AvoirRole.
     * @param {AvoirRoleCreateArgs} args - Arguments to create a AvoirRole.
     * @example
     * // Create one AvoirRole
     * const AvoirRole = await prisma.avoirRole.create({
     *   data: {
     *     // ... data to create a AvoirRole
     *   }
     * })
     * 
     */
    create<T extends AvoirRoleCreateArgs>(args: SelectSubset<T, AvoirRoleCreateArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AvoirRoles.
     * @param {AvoirRoleCreateManyArgs} args - Arguments to create many AvoirRoles.
     * @example
     * // Create many AvoirRoles
     * const avoirRole = await prisma.avoirRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AvoirRoleCreateManyArgs>(args?: SelectSubset<T, AvoirRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AvoirRoles and returns the data saved in the database.
     * @param {AvoirRoleCreateManyAndReturnArgs} args - Arguments to create many AvoirRoles.
     * @example
     * // Create many AvoirRoles
     * const avoirRole = await prisma.avoirRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AvoirRoles and only return the `idUtilisateur`
     * const avoirRoleWithIdUtilisateurOnly = await prisma.avoirRole.createManyAndReturn({ 
     *   select: { idUtilisateur: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AvoirRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, AvoirRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AvoirRole.
     * @param {AvoirRoleDeleteArgs} args - Arguments to delete one AvoirRole.
     * @example
     * // Delete one AvoirRole
     * const AvoirRole = await prisma.avoirRole.delete({
     *   where: {
     *     // ... filter to delete one AvoirRole
     *   }
     * })
     * 
     */
    delete<T extends AvoirRoleDeleteArgs>(args: SelectSubset<T, AvoirRoleDeleteArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AvoirRole.
     * @param {AvoirRoleUpdateArgs} args - Arguments to update one AvoirRole.
     * @example
     * // Update one AvoirRole
     * const avoirRole = await prisma.avoirRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AvoirRoleUpdateArgs>(args: SelectSubset<T, AvoirRoleUpdateArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AvoirRoles.
     * @param {AvoirRoleDeleteManyArgs} args - Arguments to filter AvoirRoles to delete.
     * @example
     * // Delete a few AvoirRoles
     * const { count } = await prisma.avoirRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AvoirRoleDeleteManyArgs>(args?: SelectSubset<T, AvoirRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AvoirRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvoirRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AvoirRoles
     * const avoirRole = await prisma.avoirRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AvoirRoleUpdateManyArgs>(args: SelectSubset<T, AvoirRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AvoirRole.
     * @param {AvoirRoleUpsertArgs} args - Arguments to update or create a AvoirRole.
     * @example
     * // Update or create a AvoirRole
     * const avoirRole = await prisma.avoirRole.upsert({
     *   create: {
     *     // ... data to create a AvoirRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AvoirRole we want to update
     *   }
     * })
     */
    upsert<T extends AvoirRoleUpsertArgs>(args: SelectSubset<T, AvoirRoleUpsertArgs<ExtArgs>>): Prisma__AvoirRoleClient<$Result.GetResult<Prisma.$AvoirRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AvoirRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvoirRoleCountArgs} args - Arguments to filter AvoirRoles to count.
     * @example
     * // Count the number of AvoirRoles
     * const count = await prisma.avoirRole.count({
     *   where: {
     *     // ... the filter for the AvoirRoles we want to count
     *   }
     * })
    **/
    count<T extends AvoirRoleCountArgs>(
      args?: Subset<T, AvoirRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvoirRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AvoirRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvoirRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvoirRoleAggregateArgs>(args: Subset<T, AvoirRoleAggregateArgs>): Prisma.PrismaPromise<GetAvoirRoleAggregateType<T>>

    /**
     * Group by AvoirRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvoirRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvoirRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvoirRoleGroupByArgs['orderBy'] }
        : { orderBy?: AvoirRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvoirRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvoirRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AvoirRole model
   */
  readonly fields: AvoirRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AvoirRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AvoirRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    utilisateur<T extends UtilisateurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilisateurDefaultArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AvoirRole model
   */ 
  interface AvoirRoleFieldRefs {
    readonly idUtilisateur: FieldRef<"AvoirRole", 'Int'>
    readonly idRole: FieldRef<"AvoirRole", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AvoirRole findUnique
   */
  export type AvoirRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * Filter, which AvoirRole to fetch.
     */
    where: AvoirRoleWhereUniqueInput
  }

  /**
   * AvoirRole findUniqueOrThrow
   */
  export type AvoirRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * Filter, which AvoirRole to fetch.
     */
    where: AvoirRoleWhereUniqueInput
  }

  /**
   * AvoirRole findFirst
   */
  export type AvoirRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * Filter, which AvoirRole to fetch.
     */
    where?: AvoirRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvoirRoles to fetch.
     */
    orderBy?: AvoirRoleOrderByWithRelationInput | AvoirRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AvoirRoles.
     */
    cursor?: AvoirRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvoirRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvoirRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AvoirRoles.
     */
    distinct?: AvoirRoleScalarFieldEnum | AvoirRoleScalarFieldEnum[]
  }

  /**
   * AvoirRole findFirstOrThrow
   */
  export type AvoirRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * Filter, which AvoirRole to fetch.
     */
    where?: AvoirRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvoirRoles to fetch.
     */
    orderBy?: AvoirRoleOrderByWithRelationInput | AvoirRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AvoirRoles.
     */
    cursor?: AvoirRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvoirRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvoirRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AvoirRoles.
     */
    distinct?: AvoirRoleScalarFieldEnum | AvoirRoleScalarFieldEnum[]
  }

  /**
   * AvoirRole findMany
   */
  export type AvoirRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * Filter, which AvoirRoles to fetch.
     */
    where?: AvoirRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvoirRoles to fetch.
     */
    orderBy?: AvoirRoleOrderByWithRelationInput | AvoirRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AvoirRoles.
     */
    cursor?: AvoirRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvoirRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvoirRoles.
     */
    skip?: number
    distinct?: AvoirRoleScalarFieldEnum | AvoirRoleScalarFieldEnum[]
  }

  /**
   * AvoirRole create
   */
  export type AvoirRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a AvoirRole.
     */
    data: XOR<AvoirRoleCreateInput, AvoirRoleUncheckedCreateInput>
  }

  /**
   * AvoirRole createMany
   */
  export type AvoirRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AvoirRoles.
     */
    data: AvoirRoleCreateManyInput | AvoirRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AvoirRole createManyAndReturn
   */
  export type AvoirRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AvoirRoles.
     */
    data: AvoirRoleCreateManyInput | AvoirRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AvoirRole update
   */
  export type AvoirRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a AvoirRole.
     */
    data: XOR<AvoirRoleUpdateInput, AvoirRoleUncheckedUpdateInput>
    /**
     * Choose, which AvoirRole to update.
     */
    where: AvoirRoleWhereUniqueInput
  }

  /**
   * AvoirRole updateMany
   */
  export type AvoirRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AvoirRoles.
     */
    data: XOR<AvoirRoleUpdateManyMutationInput, AvoirRoleUncheckedUpdateManyInput>
    /**
     * Filter which AvoirRoles to update
     */
    where?: AvoirRoleWhereInput
  }

  /**
   * AvoirRole upsert
   */
  export type AvoirRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the AvoirRole to update in case it exists.
     */
    where: AvoirRoleWhereUniqueInput
    /**
     * In case the AvoirRole found by the `where` argument doesn't exist, create a new AvoirRole with this data.
     */
    create: XOR<AvoirRoleCreateInput, AvoirRoleUncheckedCreateInput>
    /**
     * In case the AvoirRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvoirRoleUpdateInput, AvoirRoleUncheckedUpdateInput>
  }

  /**
   * AvoirRole delete
   */
  export type AvoirRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
    /**
     * Filter which AvoirRole to delete.
     */
    where: AvoirRoleWhereUniqueInput
  }

  /**
   * AvoirRole deleteMany
   */
  export type AvoirRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AvoirRoles to delete
     */
    where?: AvoirRoleWhereInput
  }

  /**
   * AvoirRole without action
   */
  export type AvoirRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvoirRole
     */
    select?: AvoirRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvoirRoleInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilisateurScalarFieldEnum: {
    idUtilisateur: 'idUtilisateur',
    nom: 'nom',
    prenom: 'prenom',
    dateNaissance: 'dateNaissance',
    numero: 'numero',
    email: 'email',
    adresse: 'adresse',
    pseudo: 'pseudo',
    motDePasse: 'motDePasse'
  };

  export type UtilisateurScalarFieldEnum = (typeof UtilisateurScalarFieldEnum)[keyof typeof UtilisateurScalarFieldEnum]


  export const PlanteScalarFieldEnum: {
    idPlante: 'idPlante',
    espece: 'espece',
    description: 'description',
    nom: 'nom',
    adresse: 'adresse',
    idUtilisateur: 'idUtilisateur'
  };

  export type PlanteScalarFieldEnum = (typeof PlanteScalarFieldEnum)[keyof typeof PlanteScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    idRole: 'idRole',
    libelle: 'libelle'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const ConseilScalarFieldEnum: {
    idConseil: 'idConseil',
    description: 'description',
    idPlante: 'idPlante',
    idUtilisateur: 'idUtilisateur'
  };

  export type ConseilScalarFieldEnum = (typeof ConseilScalarFieldEnum)[keyof typeof ConseilScalarFieldEnum]


  export const GardiennageScalarFieldEnum: {
    idGardiennage: 'idGardiennage',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin',
    idUtilisateur: 'idUtilisateur',
    idPlante: 'idPlante'
  };

  export type GardiennageScalarFieldEnum = (typeof GardiennageScalarFieldEnum)[keyof typeof GardiennageScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    idConversation: 'idConversation',
    idUtilisateur: 'idUtilisateur',
    idUtilisateur_1: 'idUtilisateur_1',
    idGardiennage: 'idGardiennage'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    idMessage: 'idMessage',
    dateEnvoi: 'dateEnvoi',
    texte: 'texte',
    image: 'image',
    idUtilisateur: 'idUtilisateur',
    idConversation: 'idConversation'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const AvoirRoleScalarFieldEnum: {
    idUtilisateur: 'idUtilisateur',
    idRole: 'idRole'
  };

  export type AvoirRoleScalarFieldEnum = (typeof AvoirRoleScalarFieldEnum)[keyof typeof AvoirRoleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UtilisateurWhereInput = {
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    idUtilisateur?: IntFilter<"Utilisateur"> | number
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringFilter<"Utilisateur"> | string
    dateNaissance?: DateTimeFilter<"Utilisateur"> | Date | string
    numero?: StringFilter<"Utilisateur"> | string
    email?: StringFilter<"Utilisateur"> | string
    adresse?: StringFilter<"Utilisateur"> | string
    pseudo?: StringFilter<"Utilisateur"> | string
    motDePasse?: StringFilter<"Utilisateur"> | string
    plantes?: PlanteListRelationFilter
    conseils?: ConseilListRelationFilter
    gardiennages?: GardiennageListRelationFilter
    conversations?: ConversationListRelationFilter
    conversations2?: ConversationListRelationFilter
    messages?: MessageListRelationFilter
    roles?: AvoirRoleListRelationFilter
  }

  export type UtilisateurOrderByWithRelationInput = {
    idUtilisateur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    dateNaissance?: SortOrder
    numero?: SortOrder
    email?: SortOrder
    adresse?: SortOrder
    pseudo?: SortOrder
    motDePasse?: SortOrder
    plantes?: PlanteOrderByRelationAggregateInput
    conseils?: ConseilOrderByRelationAggregateInput
    gardiennages?: GardiennageOrderByRelationAggregateInput
    conversations?: ConversationOrderByRelationAggregateInput
    conversations2?: ConversationOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    roles?: AvoirRoleOrderByRelationAggregateInput
  }

  export type UtilisateurWhereUniqueInput = Prisma.AtLeast<{
    idUtilisateur?: number
    numero?: string
    email?: string
    pseudo?: string
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    nom?: StringFilter<"Utilisateur"> | string
    prenom?: StringFilter<"Utilisateur"> | string
    dateNaissance?: DateTimeFilter<"Utilisateur"> | Date | string
    adresse?: StringFilter<"Utilisateur"> | string
    motDePasse?: StringFilter<"Utilisateur"> | string
    plantes?: PlanteListRelationFilter
    conseils?: ConseilListRelationFilter
    gardiennages?: GardiennageListRelationFilter
    conversations?: ConversationListRelationFilter
    conversations2?: ConversationListRelationFilter
    messages?: MessageListRelationFilter
    roles?: AvoirRoleListRelationFilter
  }, "idUtilisateur" | "numero" | "email" | "pseudo">

  export type UtilisateurOrderByWithAggregationInput = {
    idUtilisateur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    dateNaissance?: SortOrder
    numero?: SortOrder
    email?: SortOrder
    adresse?: SortOrder
    pseudo?: SortOrder
    motDePasse?: SortOrder
    _count?: UtilisateurCountOrderByAggregateInput
    _avg?: UtilisateurAvgOrderByAggregateInput
    _max?: UtilisateurMaxOrderByAggregateInput
    _min?: UtilisateurMinOrderByAggregateInput
    _sum?: UtilisateurSumOrderByAggregateInput
  }

  export type UtilisateurScalarWhereWithAggregatesInput = {
    AND?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    OR?: UtilisateurScalarWhereWithAggregatesInput[]
    NOT?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    idUtilisateur?: IntWithAggregatesFilter<"Utilisateur"> | number
    nom?: StringWithAggregatesFilter<"Utilisateur"> | string
    prenom?: StringWithAggregatesFilter<"Utilisateur"> | string
    dateNaissance?: DateTimeWithAggregatesFilter<"Utilisateur"> | Date | string
    numero?: StringWithAggregatesFilter<"Utilisateur"> | string
    email?: StringWithAggregatesFilter<"Utilisateur"> | string
    adresse?: StringWithAggregatesFilter<"Utilisateur"> | string
    pseudo?: StringWithAggregatesFilter<"Utilisateur"> | string
    motDePasse?: StringWithAggregatesFilter<"Utilisateur"> | string
  }

  export type PlanteWhereInput = {
    AND?: PlanteWhereInput | PlanteWhereInput[]
    OR?: PlanteWhereInput[]
    NOT?: PlanteWhereInput | PlanteWhereInput[]
    idPlante?: IntFilter<"Plante"> | number
    espece?: StringFilter<"Plante"> | string
    description?: StringFilter<"Plante"> | string
    nom?: StringFilter<"Plante"> | string
    adresse?: StringFilter<"Plante"> | string
    idUtilisateur?: IntFilter<"Plante"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    conseils?: ConseilListRelationFilter
    gardiennages?: GardiennageListRelationFilter
  }

  export type PlanteOrderByWithRelationInput = {
    idPlante?: SortOrder
    espece?: SortOrder
    description?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    idUtilisateur?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    conseils?: ConseilOrderByRelationAggregateInput
    gardiennages?: GardiennageOrderByRelationAggregateInput
  }

  export type PlanteWhereUniqueInput = Prisma.AtLeast<{
    idPlante?: number
    AND?: PlanteWhereInput | PlanteWhereInput[]
    OR?: PlanteWhereInput[]
    NOT?: PlanteWhereInput | PlanteWhereInput[]
    espece?: StringFilter<"Plante"> | string
    description?: StringFilter<"Plante"> | string
    nom?: StringFilter<"Plante"> | string
    adresse?: StringFilter<"Plante"> | string
    idUtilisateur?: IntFilter<"Plante"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    conseils?: ConseilListRelationFilter
    gardiennages?: GardiennageListRelationFilter
  }, "idPlante">

  export type PlanteOrderByWithAggregationInput = {
    idPlante?: SortOrder
    espece?: SortOrder
    description?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    idUtilisateur?: SortOrder
    _count?: PlanteCountOrderByAggregateInput
    _avg?: PlanteAvgOrderByAggregateInput
    _max?: PlanteMaxOrderByAggregateInput
    _min?: PlanteMinOrderByAggregateInput
    _sum?: PlanteSumOrderByAggregateInput
  }

  export type PlanteScalarWhereWithAggregatesInput = {
    AND?: PlanteScalarWhereWithAggregatesInput | PlanteScalarWhereWithAggregatesInput[]
    OR?: PlanteScalarWhereWithAggregatesInput[]
    NOT?: PlanteScalarWhereWithAggregatesInput | PlanteScalarWhereWithAggregatesInput[]
    idPlante?: IntWithAggregatesFilter<"Plante"> | number
    espece?: StringWithAggregatesFilter<"Plante"> | string
    description?: StringWithAggregatesFilter<"Plante"> | string
    nom?: StringWithAggregatesFilter<"Plante"> | string
    adresse?: StringWithAggregatesFilter<"Plante"> | string
    idUtilisateur?: IntWithAggregatesFilter<"Plante"> | number
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    idRole?: IntFilter<"Role"> | number
    libelle?: StringFilter<"Role"> | string
    utilisateurs?: AvoirRoleListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    idRole?: SortOrder
    libelle?: SortOrder
    utilisateurs?: AvoirRoleOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    idRole?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    libelle?: StringFilter<"Role"> | string
    utilisateurs?: AvoirRoleListRelationFilter
  }, "idRole">

  export type RoleOrderByWithAggregationInput = {
    idRole?: SortOrder
    libelle?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    idRole?: IntWithAggregatesFilter<"Role"> | number
    libelle?: StringWithAggregatesFilter<"Role"> | string
  }

  export type ConseilWhereInput = {
    AND?: ConseilWhereInput | ConseilWhereInput[]
    OR?: ConseilWhereInput[]
    NOT?: ConseilWhereInput | ConseilWhereInput[]
    idConseil?: IntFilter<"Conseil"> | number
    description?: StringFilter<"Conseil"> | string
    idPlante?: IntFilter<"Conseil"> | number
    idUtilisateur?: IntFilter<"Conseil"> | number
    plante?: XOR<PlanteRelationFilter, PlanteWhereInput>
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
  }

  export type ConseilOrderByWithRelationInput = {
    idConseil?: SortOrder
    description?: SortOrder
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
    plante?: PlanteOrderByWithRelationInput
    utilisateur?: UtilisateurOrderByWithRelationInput
  }

  export type ConseilWhereUniqueInput = Prisma.AtLeast<{
    idConseil?: number
    AND?: ConseilWhereInput | ConseilWhereInput[]
    OR?: ConseilWhereInput[]
    NOT?: ConseilWhereInput | ConseilWhereInput[]
    description?: StringFilter<"Conseil"> | string
    idPlante?: IntFilter<"Conseil"> | number
    idUtilisateur?: IntFilter<"Conseil"> | number
    plante?: XOR<PlanteRelationFilter, PlanteWhereInput>
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
  }, "idConseil">

  export type ConseilOrderByWithAggregationInput = {
    idConseil?: SortOrder
    description?: SortOrder
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
    _count?: ConseilCountOrderByAggregateInput
    _avg?: ConseilAvgOrderByAggregateInput
    _max?: ConseilMaxOrderByAggregateInput
    _min?: ConseilMinOrderByAggregateInput
    _sum?: ConseilSumOrderByAggregateInput
  }

  export type ConseilScalarWhereWithAggregatesInput = {
    AND?: ConseilScalarWhereWithAggregatesInput | ConseilScalarWhereWithAggregatesInput[]
    OR?: ConseilScalarWhereWithAggregatesInput[]
    NOT?: ConseilScalarWhereWithAggregatesInput | ConseilScalarWhereWithAggregatesInput[]
    idConseil?: IntWithAggregatesFilter<"Conseil"> | number
    description?: StringWithAggregatesFilter<"Conseil"> | string
    idPlante?: IntWithAggregatesFilter<"Conseil"> | number
    idUtilisateur?: IntWithAggregatesFilter<"Conseil"> | number
  }

  export type GardiennageWhereInput = {
    AND?: GardiennageWhereInput | GardiennageWhereInput[]
    OR?: GardiennageWhereInput[]
    NOT?: GardiennageWhereInput | GardiennageWhereInput[]
    idGardiennage?: IntFilter<"Gardiennage"> | number
    dateDebut?: DateTimeFilter<"Gardiennage"> | Date | string
    dateFin?: DateTimeFilter<"Gardiennage"> | Date | string
    idUtilisateur?: IntNullableFilter<"Gardiennage"> | number | null
    idPlante?: IntFilter<"Gardiennage"> | number
    utilisateur?: XOR<UtilisateurNullableRelationFilter, UtilisateurWhereInput> | null
    plante?: XOR<PlanteRelationFilter, PlanteWhereInput>
    conversation?: XOR<ConversationNullableRelationFilter, ConversationWhereInput> | null
  }

  export type GardiennageOrderByWithRelationInput = {
    idGardiennage?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    idUtilisateur?: SortOrderInput | SortOrder
    idPlante?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    plante?: PlanteOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type GardiennageWhereUniqueInput = Prisma.AtLeast<{
    idGardiennage?: number
    AND?: GardiennageWhereInput | GardiennageWhereInput[]
    OR?: GardiennageWhereInput[]
    NOT?: GardiennageWhereInput | GardiennageWhereInput[]
    dateDebut?: DateTimeFilter<"Gardiennage"> | Date | string
    dateFin?: DateTimeFilter<"Gardiennage"> | Date | string
    idUtilisateur?: IntNullableFilter<"Gardiennage"> | number | null
    idPlante?: IntFilter<"Gardiennage"> | number
    utilisateur?: XOR<UtilisateurNullableRelationFilter, UtilisateurWhereInput> | null
    plante?: XOR<PlanteRelationFilter, PlanteWhereInput>
    conversation?: XOR<ConversationNullableRelationFilter, ConversationWhereInput> | null
  }, "idGardiennage" | "idGardiennage">

  export type GardiennageOrderByWithAggregationInput = {
    idGardiennage?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    idUtilisateur?: SortOrderInput | SortOrder
    idPlante?: SortOrder
    _count?: GardiennageCountOrderByAggregateInput
    _avg?: GardiennageAvgOrderByAggregateInput
    _max?: GardiennageMaxOrderByAggregateInput
    _min?: GardiennageMinOrderByAggregateInput
    _sum?: GardiennageSumOrderByAggregateInput
  }

  export type GardiennageScalarWhereWithAggregatesInput = {
    AND?: GardiennageScalarWhereWithAggregatesInput | GardiennageScalarWhereWithAggregatesInput[]
    OR?: GardiennageScalarWhereWithAggregatesInput[]
    NOT?: GardiennageScalarWhereWithAggregatesInput | GardiennageScalarWhereWithAggregatesInput[]
    idGardiennage?: IntWithAggregatesFilter<"Gardiennage"> | number
    dateDebut?: DateTimeWithAggregatesFilter<"Gardiennage"> | Date | string
    dateFin?: DateTimeWithAggregatesFilter<"Gardiennage"> | Date | string
    idUtilisateur?: IntNullableWithAggregatesFilter<"Gardiennage"> | number | null
    idPlante?: IntWithAggregatesFilter<"Gardiennage"> | number
  }

  export type ConversationWhereInput = {
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    idConversation?: IntFilter<"Conversation"> | number
    idUtilisateur?: IntFilter<"Conversation"> | number
    idUtilisateur_1?: IntFilter<"Conversation"> | number
    idGardiennage?: IntFilter<"Conversation"> | number
    membre1?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    membre2?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    gardiennage?: XOR<GardiennageRelationFilter, GardiennageWhereInput>
    messages?: MessageListRelationFilter
  }

  export type ConversationOrderByWithRelationInput = {
    idConversation?: SortOrder
    idUtilisateur?: SortOrder
    idUtilisateur_1?: SortOrder
    idGardiennage?: SortOrder
    membre1?: UtilisateurOrderByWithRelationInput
    membre2?: UtilisateurOrderByWithRelationInput
    gardiennage?: GardiennageOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ConversationWhereUniqueInput = Prisma.AtLeast<{
    idConversation?: number
    idGardiennage?: number
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    idUtilisateur?: IntFilter<"Conversation"> | number
    idUtilisateur_1?: IntFilter<"Conversation"> | number
    membre1?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    membre2?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    gardiennage?: XOR<GardiennageRelationFilter, GardiennageWhereInput>
    messages?: MessageListRelationFilter
  }, "idConversation" | "idGardiennage">

  export type ConversationOrderByWithAggregationInput = {
    idConversation?: SortOrder
    idUtilisateur?: SortOrder
    idUtilisateur_1?: SortOrder
    idGardiennage?: SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _avg?: ConversationAvgOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
    _sum?: ConversationSumOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    OR?: ConversationScalarWhereWithAggregatesInput[]
    NOT?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    idConversation?: IntWithAggregatesFilter<"Conversation"> | number
    idUtilisateur?: IntWithAggregatesFilter<"Conversation"> | number
    idUtilisateur_1?: IntWithAggregatesFilter<"Conversation"> | number
    idGardiennage?: IntWithAggregatesFilter<"Conversation"> | number
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    idMessage?: IntFilter<"Message"> | number
    dateEnvoi?: StringFilter<"Message"> | string
    texte?: StringFilter<"Message"> | string
    image?: StringNullableFilter<"Message"> | string | null
    idUtilisateur?: IntFilter<"Message"> | number
    idConversation?: IntFilter<"Message"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    idMessage?: SortOrder
    dateEnvoi?: SortOrder
    texte?: SortOrder
    image?: SortOrderInput | SortOrder
    idUtilisateur?: SortOrder
    idConversation?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    conversation?: ConversationOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    idMessage?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    dateEnvoi?: StringFilter<"Message"> | string
    texte?: StringFilter<"Message"> | string
    image?: StringNullableFilter<"Message"> | string | null
    idUtilisateur?: IntFilter<"Message"> | number
    idConversation?: IntFilter<"Message"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
  }, "idMessage">

  export type MessageOrderByWithAggregationInput = {
    idMessage?: SortOrder
    dateEnvoi?: SortOrder
    texte?: SortOrder
    image?: SortOrderInput | SortOrder
    idUtilisateur?: SortOrder
    idConversation?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    idMessage?: IntWithAggregatesFilter<"Message"> | number
    dateEnvoi?: StringWithAggregatesFilter<"Message"> | string
    texte?: StringWithAggregatesFilter<"Message"> | string
    image?: StringNullableWithAggregatesFilter<"Message"> | string | null
    idUtilisateur?: IntWithAggregatesFilter<"Message"> | number
    idConversation?: IntWithAggregatesFilter<"Message"> | number
  }

  export type AvoirRoleWhereInput = {
    AND?: AvoirRoleWhereInput | AvoirRoleWhereInput[]
    OR?: AvoirRoleWhereInput[]
    NOT?: AvoirRoleWhereInput | AvoirRoleWhereInput[]
    idUtilisateur?: IntFilter<"AvoirRole"> | number
    idRole?: IntFilter<"AvoirRole"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type AvoirRoleOrderByWithRelationInput = {
    idUtilisateur?: SortOrder
    idRole?: SortOrder
    utilisateur?: UtilisateurOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type AvoirRoleWhereUniqueInput = Prisma.AtLeast<{
    idUtilisateur_idRole?: AvoirRoleIdUtilisateurIdRoleCompoundUniqueInput
    AND?: AvoirRoleWhereInput | AvoirRoleWhereInput[]
    OR?: AvoirRoleWhereInput[]
    NOT?: AvoirRoleWhereInput | AvoirRoleWhereInput[]
    idUtilisateur?: IntFilter<"AvoirRole"> | number
    idRole?: IntFilter<"AvoirRole"> | number
    utilisateur?: XOR<UtilisateurRelationFilter, UtilisateurWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "idUtilisateur_idRole">

  export type AvoirRoleOrderByWithAggregationInput = {
    idUtilisateur?: SortOrder
    idRole?: SortOrder
    _count?: AvoirRoleCountOrderByAggregateInput
    _avg?: AvoirRoleAvgOrderByAggregateInput
    _max?: AvoirRoleMaxOrderByAggregateInput
    _min?: AvoirRoleMinOrderByAggregateInput
    _sum?: AvoirRoleSumOrderByAggregateInput
  }

  export type AvoirRoleScalarWhereWithAggregatesInput = {
    AND?: AvoirRoleScalarWhereWithAggregatesInput | AvoirRoleScalarWhereWithAggregatesInput[]
    OR?: AvoirRoleScalarWhereWithAggregatesInput[]
    NOT?: AvoirRoleScalarWhereWithAggregatesInput | AvoirRoleScalarWhereWithAggregatesInput[]
    idUtilisateur?: IntWithAggregatesFilter<"AvoirRole"> | number
    idRole?: IntWithAggregatesFilter<"AvoirRole"> | number
  }

  export type UtilisateurCreateInput = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationCreateNestedManyWithoutMembre2Input
    messages?: MessageCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteUncheckedCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilUncheckedCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationUncheckedCreateNestedManyWithoutMembre2Input
    messages?: MessageUncheckedCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUpdateManyWithoutMembre2NestedInput
    messages?: MessageUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUncheckedUpdateManyWithoutMembre2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurCreateManyInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
  }

  export type UtilisateurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
  }

  export type UtilisateurUncheckedUpdateManyInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
  }

  export type PlanteCreateInput = {
    espece: string
    description: string
    nom: string
    adresse: string
    utilisateur: UtilisateurCreateNestedOneWithoutPlantesInput
    conseils?: ConseilCreateNestedManyWithoutPlanteInput
    gardiennages?: GardiennageCreateNestedManyWithoutPlanteInput
  }

  export type PlanteUncheckedCreateInput = {
    idPlante?: number
    espece: string
    description: string
    nom: string
    adresse: string
    idUtilisateur: number
    conseils?: ConseilUncheckedCreateNestedManyWithoutPlanteInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutPlanteInput
  }

  export type PlanteUpdateInput = {
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutPlantesNestedInput
    conseils?: ConseilUpdateManyWithoutPlanteNestedInput
    gardiennages?: GardiennageUpdateManyWithoutPlanteNestedInput
  }

  export type PlanteUncheckedUpdateInput = {
    idPlante?: IntFieldUpdateOperationsInput | number
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    conseils?: ConseilUncheckedUpdateManyWithoutPlanteNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutPlanteNestedInput
  }

  export type PlanteCreateManyInput = {
    idPlante?: number
    espece: string
    description: string
    nom: string
    adresse: string
    idUtilisateur: number
  }

  export type PlanteUpdateManyMutationInput = {
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
  }

  export type PlanteUncheckedUpdateManyInput = {
    idPlante?: IntFieldUpdateOperationsInput | number
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateInput = {
    libelle: string
    utilisateurs?: AvoirRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    idRole?: number
    libelle: string
    utilisateurs?: AvoirRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    utilisateurs?: AvoirRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    idRole?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    utilisateurs?: AvoirRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    idRole?: number
    libelle: string
  }

  export type RoleUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    idRole?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type ConseilCreateInput = {
    description: string
    plante: PlanteCreateNestedOneWithoutConseilsInput
    utilisateur: UtilisateurCreateNestedOneWithoutConseilsInput
  }

  export type ConseilUncheckedCreateInput = {
    idConseil?: number
    description: string
    idPlante: number
    idUtilisateur: number
  }

  export type ConseilUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    plante?: PlanteUpdateOneRequiredWithoutConseilsNestedInput
    utilisateur?: UtilisateurUpdateOneRequiredWithoutConseilsNestedInput
  }

  export type ConseilUncheckedUpdateInput = {
    idConseil?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    idPlante?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type ConseilCreateManyInput = {
    idConseil?: number
    description: string
    idPlante: number
    idUtilisateur: number
  }

  export type ConseilUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ConseilUncheckedUpdateManyInput = {
    idConseil?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    idPlante?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type GardiennageCreateInput = {
    dateDebut: Date | string
    dateFin: Date | string
    utilisateur?: UtilisateurCreateNestedOneWithoutGardiennagesInput
    plante: PlanteCreateNestedOneWithoutGardiennagesInput
    conversation?: ConversationCreateNestedOneWithoutGardiennageInput
  }

  export type GardiennageUncheckedCreateInput = {
    idGardiennage?: number
    dateDebut: Date | string
    dateFin: Date | string
    idUtilisateur?: number | null
    idPlante: number
    conversation?: ConversationUncheckedCreateNestedOneWithoutGardiennageInput
  }

  export type GardiennageUpdateInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneWithoutGardiennagesNestedInput
    plante?: PlanteUpdateOneRequiredWithoutGardiennagesNestedInput
    conversation?: ConversationUpdateOneWithoutGardiennageNestedInput
  }

  export type GardiennageUncheckedUpdateInput = {
    idGardiennage?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    idUtilisateur?: NullableIntFieldUpdateOperationsInput | number | null
    idPlante?: IntFieldUpdateOperationsInput | number
    conversation?: ConversationUncheckedUpdateOneWithoutGardiennageNestedInput
  }

  export type GardiennageCreateManyInput = {
    idGardiennage?: number
    dateDebut: Date | string
    dateFin: Date | string
    idUtilisateur?: number | null
    idPlante: number
  }

  export type GardiennageUpdateManyMutationInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GardiennageUncheckedUpdateManyInput = {
    idGardiennage?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    idUtilisateur?: NullableIntFieldUpdateOperationsInput | number | null
    idPlante?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationCreateInput = {
    membre1: UtilisateurCreateNestedOneWithoutConversationsInput
    membre2: UtilisateurCreateNestedOneWithoutConversations2Input
    gardiennage: GardiennageCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    idConversation?: number
    idUtilisateur: number
    idUtilisateur_1: number
    idGardiennage: number
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationUpdateInput = {
    membre1?: UtilisateurUpdateOneRequiredWithoutConversationsNestedInput
    membre2?: UtilisateurUpdateOneRequiredWithoutConversations2NestedInput
    gardiennage?: GardiennageUpdateOneRequiredWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateInput = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idUtilisateur_1?: IntFieldUpdateOperationsInput | number
    idGardiennage?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationCreateManyInput = {
    idConversation?: number
    idUtilisateur: number
    idUtilisateur_1: number
    idGardiennage: number
  }

  export type ConversationUpdateManyMutationInput = {

  }

  export type ConversationUncheckedUpdateManyInput = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idUtilisateur_1?: IntFieldUpdateOperationsInput | number
    idGardiennage?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateInput = {
    dateEnvoi: string
    texte: string
    image?: string | null
    utilisateur: UtilisateurCreateNestedOneWithoutMessagesInput
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    idMessage?: number
    dateEnvoi: string
    texte: string
    image?: string | null
    idUtilisateur: number
    idConversation: number
  }

  export type MessageUpdateInput = {
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utilisateur?: UtilisateurUpdateOneRequiredWithoutMessagesNestedInput
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    idMessage?: IntFieldUpdateOperationsInput | number
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idConversation?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyInput = {
    idMessage?: number
    dateEnvoi: string
    texte: string
    image?: string | null
    idUtilisateur: number
    idConversation: number
  }

  export type MessageUpdateManyMutationInput = {
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyInput = {
    idMessage?: IntFieldUpdateOperationsInput | number
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idConversation?: IntFieldUpdateOperationsInput | number
  }

  export type AvoirRoleCreateInput = {
    utilisateur: UtilisateurCreateNestedOneWithoutRolesInput
    role: RoleCreateNestedOneWithoutUtilisateursInput
  }

  export type AvoirRoleUncheckedCreateInput = {
    idUtilisateur: number
    idRole: number
  }

  export type AvoirRoleUpdateInput = {
    utilisateur?: UtilisateurUpdateOneRequiredWithoutRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUtilisateursNestedInput
  }

  export type AvoirRoleUncheckedUpdateInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idRole?: IntFieldUpdateOperationsInput | number
  }

  export type AvoirRoleCreateManyInput = {
    idUtilisateur: number
    idRole: number
  }

  export type AvoirRoleUpdateManyMutationInput = {

  }

  export type AvoirRoleUncheckedUpdateManyInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idRole?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PlanteListRelationFilter = {
    every?: PlanteWhereInput
    some?: PlanteWhereInput
    none?: PlanteWhereInput
  }

  export type ConseilListRelationFilter = {
    every?: ConseilWhereInput
    some?: ConseilWhereInput
    none?: ConseilWhereInput
  }

  export type GardiennageListRelationFilter = {
    every?: GardiennageWhereInput
    some?: GardiennageWhereInput
    none?: GardiennageWhereInput
  }

  export type ConversationListRelationFilter = {
    every?: ConversationWhereInput
    some?: ConversationWhereInput
    none?: ConversationWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type AvoirRoleListRelationFilter = {
    every?: AvoirRoleWhereInput
    some?: AvoirRoleWhereInput
    none?: AvoirRoleWhereInput
  }

  export type PlanteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConseilOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GardiennageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AvoirRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilisateurCountOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    dateNaissance?: SortOrder
    numero?: SortOrder
    email?: SortOrder
    adresse?: SortOrder
    pseudo?: SortOrder
    motDePasse?: SortOrder
  }

  export type UtilisateurAvgOrderByAggregateInput = {
    idUtilisateur?: SortOrder
  }

  export type UtilisateurMaxOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    dateNaissance?: SortOrder
    numero?: SortOrder
    email?: SortOrder
    adresse?: SortOrder
    pseudo?: SortOrder
    motDePasse?: SortOrder
  }

  export type UtilisateurMinOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    dateNaissance?: SortOrder
    numero?: SortOrder
    email?: SortOrder
    adresse?: SortOrder
    pseudo?: SortOrder
    motDePasse?: SortOrder
  }

  export type UtilisateurSumOrderByAggregateInput = {
    idUtilisateur?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UtilisateurRelationFilter = {
    is?: UtilisateurWhereInput
    isNot?: UtilisateurWhereInput
  }

  export type PlanteCountOrderByAggregateInput = {
    idPlante?: SortOrder
    espece?: SortOrder
    description?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type PlanteAvgOrderByAggregateInput = {
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type PlanteMaxOrderByAggregateInput = {
    idPlante?: SortOrder
    espece?: SortOrder
    description?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type PlanteMinOrderByAggregateInput = {
    idPlante?: SortOrder
    espece?: SortOrder
    description?: SortOrder
    nom?: SortOrder
    adresse?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type PlanteSumOrderByAggregateInput = {
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    idRole?: SortOrder
    libelle?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    idRole?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    idRole?: SortOrder
    libelle?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    idRole?: SortOrder
    libelle?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    idRole?: SortOrder
  }

  export type PlanteRelationFilter = {
    is?: PlanteWhereInput
    isNot?: PlanteWhereInput
  }

  export type ConseilCountOrderByAggregateInput = {
    idConseil?: SortOrder
    description?: SortOrder
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type ConseilAvgOrderByAggregateInput = {
    idConseil?: SortOrder
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type ConseilMaxOrderByAggregateInput = {
    idConseil?: SortOrder
    description?: SortOrder
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type ConseilMinOrderByAggregateInput = {
    idConseil?: SortOrder
    description?: SortOrder
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type ConseilSumOrderByAggregateInput = {
    idConseil?: SortOrder
    idPlante?: SortOrder
    idUtilisateur?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UtilisateurNullableRelationFilter = {
    is?: UtilisateurWhereInput | null
    isNot?: UtilisateurWhereInput | null
  }

  export type ConversationNullableRelationFilter = {
    is?: ConversationWhereInput | null
    isNot?: ConversationWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GardiennageCountOrderByAggregateInput = {
    idGardiennage?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    idUtilisateur?: SortOrder
    idPlante?: SortOrder
  }

  export type GardiennageAvgOrderByAggregateInput = {
    idGardiennage?: SortOrder
    idUtilisateur?: SortOrder
    idPlante?: SortOrder
  }

  export type GardiennageMaxOrderByAggregateInput = {
    idGardiennage?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    idUtilisateur?: SortOrder
    idPlante?: SortOrder
  }

  export type GardiennageMinOrderByAggregateInput = {
    idGardiennage?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    idUtilisateur?: SortOrder
    idPlante?: SortOrder
  }

  export type GardiennageSumOrderByAggregateInput = {
    idGardiennage?: SortOrder
    idUtilisateur?: SortOrder
    idPlante?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type GardiennageRelationFilter = {
    is?: GardiennageWhereInput
    isNot?: GardiennageWhereInput
  }

  export type ConversationCountOrderByAggregateInput = {
    idConversation?: SortOrder
    idUtilisateur?: SortOrder
    idUtilisateur_1?: SortOrder
    idGardiennage?: SortOrder
  }

  export type ConversationAvgOrderByAggregateInput = {
    idConversation?: SortOrder
    idUtilisateur?: SortOrder
    idUtilisateur_1?: SortOrder
    idGardiennage?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    idConversation?: SortOrder
    idUtilisateur?: SortOrder
    idUtilisateur_1?: SortOrder
    idGardiennage?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    idConversation?: SortOrder
    idUtilisateur?: SortOrder
    idUtilisateur_1?: SortOrder
    idGardiennage?: SortOrder
  }

  export type ConversationSumOrderByAggregateInput = {
    idConversation?: SortOrder
    idUtilisateur?: SortOrder
    idUtilisateur_1?: SortOrder
    idGardiennage?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ConversationRelationFilter = {
    is?: ConversationWhereInput
    isNot?: ConversationWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    idMessage?: SortOrder
    dateEnvoi?: SortOrder
    texte?: SortOrder
    image?: SortOrder
    idUtilisateur?: SortOrder
    idConversation?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    idMessage?: SortOrder
    idUtilisateur?: SortOrder
    idConversation?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    idMessage?: SortOrder
    dateEnvoi?: SortOrder
    texte?: SortOrder
    image?: SortOrder
    idUtilisateur?: SortOrder
    idConversation?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    idMessage?: SortOrder
    dateEnvoi?: SortOrder
    texte?: SortOrder
    image?: SortOrder
    idUtilisateur?: SortOrder
    idConversation?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    idMessage?: SortOrder
    idUtilisateur?: SortOrder
    idConversation?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type AvoirRoleIdUtilisateurIdRoleCompoundUniqueInput = {
    idUtilisateur: number
    idRole: number
  }

  export type AvoirRoleCountOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    idRole?: SortOrder
  }

  export type AvoirRoleAvgOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    idRole?: SortOrder
  }

  export type AvoirRoleMaxOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    idRole?: SortOrder
  }

  export type AvoirRoleMinOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    idRole?: SortOrder
  }

  export type AvoirRoleSumOrderByAggregateInput = {
    idUtilisateur?: SortOrder
    idRole?: SortOrder
  }

  export type PlanteCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<PlanteCreateWithoutUtilisateurInput, PlanteUncheckedCreateWithoutUtilisateurInput> | PlanteCreateWithoutUtilisateurInput[] | PlanteUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PlanteCreateOrConnectWithoutUtilisateurInput | PlanteCreateOrConnectWithoutUtilisateurInput[]
    createMany?: PlanteCreateManyUtilisateurInputEnvelope
    connect?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
  }

  export type ConseilCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ConseilCreateWithoutUtilisateurInput, ConseilUncheckedCreateWithoutUtilisateurInput> | ConseilCreateWithoutUtilisateurInput[] | ConseilUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutUtilisateurInput | ConseilCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ConseilCreateManyUtilisateurInputEnvelope
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
  }

  export type GardiennageCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<GardiennageCreateWithoutUtilisateurInput, GardiennageUncheckedCreateWithoutUtilisateurInput> | GardiennageCreateWithoutUtilisateurInput[] | GardiennageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutUtilisateurInput | GardiennageCreateOrConnectWithoutUtilisateurInput[]
    createMany?: GardiennageCreateManyUtilisateurInputEnvelope
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutMembre1Input = {
    create?: XOR<ConversationCreateWithoutMembre1Input, ConversationUncheckedCreateWithoutMembre1Input> | ConversationCreateWithoutMembre1Input[] | ConversationUncheckedCreateWithoutMembre1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre1Input | ConversationCreateOrConnectWithoutMembre1Input[]
    createMany?: ConversationCreateManyMembre1InputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutMembre2Input = {
    create?: XOR<ConversationCreateWithoutMembre2Input, ConversationUncheckedCreateWithoutMembre2Input> | ConversationCreateWithoutMembre2Input[] | ConversationUncheckedCreateWithoutMembre2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre2Input | ConversationCreateOrConnectWithoutMembre2Input[]
    createMany?: ConversationCreateManyMembre2InputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<MessageCreateWithoutUtilisateurInput, MessageUncheckedCreateWithoutUtilisateurInput> | MessageCreateWithoutUtilisateurInput[] | MessageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUtilisateurInput | MessageCreateOrConnectWithoutUtilisateurInput[]
    createMany?: MessageCreateManyUtilisateurInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AvoirRoleCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<AvoirRoleCreateWithoutUtilisateurInput, AvoirRoleUncheckedCreateWithoutUtilisateurInput> | AvoirRoleCreateWithoutUtilisateurInput[] | AvoirRoleUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutUtilisateurInput | AvoirRoleCreateOrConnectWithoutUtilisateurInput[]
    createMany?: AvoirRoleCreateManyUtilisateurInputEnvelope
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
  }

  export type PlanteUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<PlanteCreateWithoutUtilisateurInput, PlanteUncheckedCreateWithoutUtilisateurInput> | PlanteCreateWithoutUtilisateurInput[] | PlanteUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PlanteCreateOrConnectWithoutUtilisateurInput | PlanteCreateOrConnectWithoutUtilisateurInput[]
    createMany?: PlanteCreateManyUtilisateurInputEnvelope
    connect?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
  }

  export type ConseilUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<ConseilCreateWithoutUtilisateurInput, ConseilUncheckedCreateWithoutUtilisateurInput> | ConseilCreateWithoutUtilisateurInput[] | ConseilUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutUtilisateurInput | ConseilCreateOrConnectWithoutUtilisateurInput[]
    createMany?: ConseilCreateManyUtilisateurInputEnvelope
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
  }

  export type GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<GardiennageCreateWithoutUtilisateurInput, GardiennageUncheckedCreateWithoutUtilisateurInput> | GardiennageCreateWithoutUtilisateurInput[] | GardiennageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutUtilisateurInput | GardiennageCreateOrConnectWithoutUtilisateurInput[]
    createMany?: GardiennageCreateManyUtilisateurInputEnvelope
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutMembre1Input = {
    create?: XOR<ConversationCreateWithoutMembre1Input, ConversationUncheckedCreateWithoutMembre1Input> | ConversationCreateWithoutMembre1Input[] | ConversationUncheckedCreateWithoutMembre1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre1Input | ConversationCreateOrConnectWithoutMembre1Input[]
    createMany?: ConversationCreateManyMembre1InputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutMembre2Input = {
    create?: XOR<ConversationCreateWithoutMembre2Input, ConversationUncheckedCreateWithoutMembre2Input> | ConversationCreateWithoutMembre2Input[] | ConversationUncheckedCreateWithoutMembre2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre2Input | ConversationCreateOrConnectWithoutMembre2Input[]
    createMany?: ConversationCreateManyMembre2InputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<MessageCreateWithoutUtilisateurInput, MessageUncheckedCreateWithoutUtilisateurInput> | MessageCreateWithoutUtilisateurInput[] | MessageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUtilisateurInput | MessageCreateOrConnectWithoutUtilisateurInput[]
    createMany?: MessageCreateManyUtilisateurInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput = {
    create?: XOR<AvoirRoleCreateWithoutUtilisateurInput, AvoirRoleUncheckedCreateWithoutUtilisateurInput> | AvoirRoleCreateWithoutUtilisateurInput[] | AvoirRoleUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutUtilisateurInput | AvoirRoleCreateOrConnectWithoutUtilisateurInput[]
    createMany?: AvoirRoleCreateManyUtilisateurInputEnvelope
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PlanteUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<PlanteCreateWithoutUtilisateurInput, PlanteUncheckedCreateWithoutUtilisateurInput> | PlanteCreateWithoutUtilisateurInput[] | PlanteUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PlanteCreateOrConnectWithoutUtilisateurInput | PlanteCreateOrConnectWithoutUtilisateurInput[]
    upsert?: PlanteUpsertWithWhereUniqueWithoutUtilisateurInput | PlanteUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: PlanteCreateManyUtilisateurInputEnvelope
    set?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    disconnect?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    delete?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    connect?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    update?: PlanteUpdateWithWhereUniqueWithoutUtilisateurInput | PlanteUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: PlanteUpdateManyWithWhereWithoutUtilisateurInput | PlanteUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: PlanteScalarWhereInput | PlanteScalarWhereInput[]
  }

  export type ConseilUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ConseilCreateWithoutUtilisateurInput, ConseilUncheckedCreateWithoutUtilisateurInput> | ConseilCreateWithoutUtilisateurInput[] | ConseilUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutUtilisateurInput | ConseilCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ConseilUpsertWithWhereUniqueWithoutUtilisateurInput | ConseilUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ConseilCreateManyUtilisateurInputEnvelope
    set?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    disconnect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    delete?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    update?: ConseilUpdateWithWhereUniqueWithoutUtilisateurInput | ConseilUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ConseilUpdateManyWithWhereWithoutUtilisateurInput | ConseilUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ConseilScalarWhereInput | ConseilScalarWhereInput[]
  }

  export type GardiennageUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<GardiennageCreateWithoutUtilisateurInput, GardiennageUncheckedCreateWithoutUtilisateurInput> | GardiennageCreateWithoutUtilisateurInput[] | GardiennageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutUtilisateurInput | GardiennageCreateOrConnectWithoutUtilisateurInput[]
    upsert?: GardiennageUpsertWithWhereUniqueWithoutUtilisateurInput | GardiennageUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: GardiennageCreateManyUtilisateurInputEnvelope
    set?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    disconnect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    delete?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    update?: GardiennageUpdateWithWhereUniqueWithoutUtilisateurInput | GardiennageUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: GardiennageUpdateManyWithWhereWithoutUtilisateurInput | GardiennageUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: GardiennageScalarWhereInput | GardiennageScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutMembre1NestedInput = {
    create?: XOR<ConversationCreateWithoutMembre1Input, ConversationUncheckedCreateWithoutMembre1Input> | ConversationCreateWithoutMembre1Input[] | ConversationUncheckedCreateWithoutMembre1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre1Input | ConversationCreateOrConnectWithoutMembre1Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutMembre1Input | ConversationUpsertWithWhereUniqueWithoutMembre1Input[]
    createMany?: ConversationCreateManyMembre1InputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutMembre1Input | ConversationUpdateWithWhereUniqueWithoutMembre1Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutMembre1Input | ConversationUpdateManyWithWhereWithoutMembre1Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutMembre2NestedInput = {
    create?: XOR<ConversationCreateWithoutMembre2Input, ConversationUncheckedCreateWithoutMembre2Input> | ConversationCreateWithoutMembre2Input[] | ConversationUncheckedCreateWithoutMembre2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre2Input | ConversationCreateOrConnectWithoutMembre2Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutMembre2Input | ConversationUpsertWithWhereUniqueWithoutMembre2Input[]
    createMany?: ConversationCreateManyMembre2InputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutMembre2Input | ConversationUpdateWithWhereUniqueWithoutMembre2Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutMembre2Input | ConversationUpdateManyWithWhereWithoutMembre2Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<MessageCreateWithoutUtilisateurInput, MessageUncheckedCreateWithoutUtilisateurInput> | MessageCreateWithoutUtilisateurInput[] | MessageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUtilisateurInput | MessageCreateOrConnectWithoutUtilisateurInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUtilisateurInput | MessageUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: MessageCreateManyUtilisateurInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUtilisateurInput | MessageUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUtilisateurInput | MessageUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AvoirRoleUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<AvoirRoleCreateWithoutUtilisateurInput, AvoirRoleUncheckedCreateWithoutUtilisateurInput> | AvoirRoleCreateWithoutUtilisateurInput[] | AvoirRoleUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutUtilisateurInput | AvoirRoleCreateOrConnectWithoutUtilisateurInput[]
    upsert?: AvoirRoleUpsertWithWhereUniqueWithoutUtilisateurInput | AvoirRoleUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: AvoirRoleCreateManyUtilisateurInputEnvelope
    set?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    disconnect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    delete?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    update?: AvoirRoleUpdateWithWhereUniqueWithoutUtilisateurInput | AvoirRoleUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: AvoirRoleUpdateManyWithWhereWithoutUtilisateurInput | AvoirRoleUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: AvoirRoleScalarWhereInput | AvoirRoleScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<PlanteCreateWithoutUtilisateurInput, PlanteUncheckedCreateWithoutUtilisateurInput> | PlanteCreateWithoutUtilisateurInput[] | PlanteUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: PlanteCreateOrConnectWithoutUtilisateurInput | PlanteCreateOrConnectWithoutUtilisateurInput[]
    upsert?: PlanteUpsertWithWhereUniqueWithoutUtilisateurInput | PlanteUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: PlanteCreateManyUtilisateurInputEnvelope
    set?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    disconnect?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    delete?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    connect?: PlanteWhereUniqueInput | PlanteWhereUniqueInput[]
    update?: PlanteUpdateWithWhereUniqueWithoutUtilisateurInput | PlanteUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: PlanteUpdateManyWithWhereWithoutUtilisateurInput | PlanteUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: PlanteScalarWhereInput | PlanteScalarWhereInput[]
  }

  export type ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<ConseilCreateWithoutUtilisateurInput, ConseilUncheckedCreateWithoutUtilisateurInput> | ConseilCreateWithoutUtilisateurInput[] | ConseilUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutUtilisateurInput | ConseilCreateOrConnectWithoutUtilisateurInput[]
    upsert?: ConseilUpsertWithWhereUniqueWithoutUtilisateurInput | ConseilUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: ConseilCreateManyUtilisateurInputEnvelope
    set?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    disconnect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    delete?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    update?: ConseilUpdateWithWhereUniqueWithoutUtilisateurInput | ConseilUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: ConseilUpdateManyWithWhereWithoutUtilisateurInput | ConseilUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: ConseilScalarWhereInput | ConseilScalarWhereInput[]
  }

  export type GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<GardiennageCreateWithoutUtilisateurInput, GardiennageUncheckedCreateWithoutUtilisateurInput> | GardiennageCreateWithoutUtilisateurInput[] | GardiennageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutUtilisateurInput | GardiennageCreateOrConnectWithoutUtilisateurInput[]
    upsert?: GardiennageUpsertWithWhereUniqueWithoutUtilisateurInput | GardiennageUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: GardiennageCreateManyUtilisateurInputEnvelope
    set?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    disconnect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    delete?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    update?: GardiennageUpdateWithWhereUniqueWithoutUtilisateurInput | GardiennageUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: GardiennageUpdateManyWithWhereWithoutUtilisateurInput | GardiennageUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: GardiennageScalarWhereInput | GardiennageScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutMembre1NestedInput = {
    create?: XOR<ConversationCreateWithoutMembre1Input, ConversationUncheckedCreateWithoutMembre1Input> | ConversationCreateWithoutMembre1Input[] | ConversationUncheckedCreateWithoutMembre1Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre1Input | ConversationCreateOrConnectWithoutMembre1Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutMembre1Input | ConversationUpsertWithWhereUniqueWithoutMembre1Input[]
    createMany?: ConversationCreateManyMembre1InputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutMembre1Input | ConversationUpdateWithWhereUniqueWithoutMembre1Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutMembre1Input | ConversationUpdateManyWithWhereWithoutMembre1Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutMembre2NestedInput = {
    create?: XOR<ConversationCreateWithoutMembre2Input, ConversationUncheckedCreateWithoutMembre2Input> | ConversationCreateWithoutMembre2Input[] | ConversationUncheckedCreateWithoutMembre2Input[]
    connectOrCreate?: ConversationCreateOrConnectWithoutMembre2Input | ConversationCreateOrConnectWithoutMembre2Input[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutMembre2Input | ConversationUpsertWithWhereUniqueWithoutMembre2Input[]
    createMany?: ConversationCreateManyMembre2InputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutMembre2Input | ConversationUpdateWithWhereUniqueWithoutMembre2Input[]
    updateMany?: ConversationUpdateManyWithWhereWithoutMembre2Input | ConversationUpdateManyWithWhereWithoutMembre2Input[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<MessageCreateWithoutUtilisateurInput, MessageUncheckedCreateWithoutUtilisateurInput> | MessageCreateWithoutUtilisateurInput[] | MessageUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUtilisateurInput | MessageCreateOrConnectWithoutUtilisateurInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUtilisateurInput | MessageUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: MessageCreateManyUtilisateurInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUtilisateurInput | MessageUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUtilisateurInput | MessageUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput = {
    create?: XOR<AvoirRoleCreateWithoutUtilisateurInput, AvoirRoleUncheckedCreateWithoutUtilisateurInput> | AvoirRoleCreateWithoutUtilisateurInput[] | AvoirRoleUncheckedCreateWithoutUtilisateurInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutUtilisateurInput | AvoirRoleCreateOrConnectWithoutUtilisateurInput[]
    upsert?: AvoirRoleUpsertWithWhereUniqueWithoutUtilisateurInput | AvoirRoleUpsertWithWhereUniqueWithoutUtilisateurInput[]
    createMany?: AvoirRoleCreateManyUtilisateurInputEnvelope
    set?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    disconnect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    delete?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    update?: AvoirRoleUpdateWithWhereUniqueWithoutUtilisateurInput | AvoirRoleUpdateWithWhereUniqueWithoutUtilisateurInput[]
    updateMany?: AvoirRoleUpdateManyWithWhereWithoutUtilisateurInput | AvoirRoleUpdateManyWithWhereWithoutUtilisateurInput[]
    deleteMany?: AvoirRoleScalarWhereInput | AvoirRoleScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutPlantesInput = {
    create?: XOR<UtilisateurCreateWithoutPlantesInput, UtilisateurUncheckedCreateWithoutPlantesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutPlantesInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type ConseilCreateNestedManyWithoutPlanteInput = {
    create?: XOR<ConseilCreateWithoutPlanteInput, ConseilUncheckedCreateWithoutPlanteInput> | ConseilCreateWithoutPlanteInput[] | ConseilUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutPlanteInput | ConseilCreateOrConnectWithoutPlanteInput[]
    createMany?: ConseilCreateManyPlanteInputEnvelope
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
  }

  export type GardiennageCreateNestedManyWithoutPlanteInput = {
    create?: XOR<GardiennageCreateWithoutPlanteInput, GardiennageUncheckedCreateWithoutPlanteInput> | GardiennageCreateWithoutPlanteInput[] | GardiennageUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutPlanteInput | GardiennageCreateOrConnectWithoutPlanteInput[]
    createMany?: GardiennageCreateManyPlanteInputEnvelope
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
  }

  export type ConseilUncheckedCreateNestedManyWithoutPlanteInput = {
    create?: XOR<ConseilCreateWithoutPlanteInput, ConseilUncheckedCreateWithoutPlanteInput> | ConseilCreateWithoutPlanteInput[] | ConseilUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutPlanteInput | ConseilCreateOrConnectWithoutPlanteInput[]
    createMany?: ConseilCreateManyPlanteInputEnvelope
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
  }

  export type GardiennageUncheckedCreateNestedManyWithoutPlanteInput = {
    create?: XOR<GardiennageCreateWithoutPlanteInput, GardiennageUncheckedCreateWithoutPlanteInput> | GardiennageCreateWithoutPlanteInput[] | GardiennageUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutPlanteInput | GardiennageCreateOrConnectWithoutPlanteInput[]
    createMany?: GardiennageCreateManyPlanteInputEnvelope
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
  }

  export type UtilisateurUpdateOneRequiredWithoutPlantesNestedInput = {
    create?: XOR<UtilisateurCreateWithoutPlantesInput, UtilisateurUncheckedCreateWithoutPlantesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutPlantesInput
    upsert?: UtilisateurUpsertWithoutPlantesInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutPlantesInput, UtilisateurUpdateWithoutPlantesInput>, UtilisateurUncheckedUpdateWithoutPlantesInput>
  }

  export type ConseilUpdateManyWithoutPlanteNestedInput = {
    create?: XOR<ConseilCreateWithoutPlanteInput, ConseilUncheckedCreateWithoutPlanteInput> | ConseilCreateWithoutPlanteInput[] | ConseilUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutPlanteInput | ConseilCreateOrConnectWithoutPlanteInput[]
    upsert?: ConseilUpsertWithWhereUniqueWithoutPlanteInput | ConseilUpsertWithWhereUniqueWithoutPlanteInput[]
    createMany?: ConseilCreateManyPlanteInputEnvelope
    set?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    disconnect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    delete?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    update?: ConseilUpdateWithWhereUniqueWithoutPlanteInput | ConseilUpdateWithWhereUniqueWithoutPlanteInput[]
    updateMany?: ConseilUpdateManyWithWhereWithoutPlanteInput | ConseilUpdateManyWithWhereWithoutPlanteInput[]
    deleteMany?: ConseilScalarWhereInput | ConseilScalarWhereInput[]
  }

  export type GardiennageUpdateManyWithoutPlanteNestedInput = {
    create?: XOR<GardiennageCreateWithoutPlanteInput, GardiennageUncheckedCreateWithoutPlanteInput> | GardiennageCreateWithoutPlanteInput[] | GardiennageUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutPlanteInput | GardiennageCreateOrConnectWithoutPlanteInput[]
    upsert?: GardiennageUpsertWithWhereUniqueWithoutPlanteInput | GardiennageUpsertWithWhereUniqueWithoutPlanteInput[]
    createMany?: GardiennageCreateManyPlanteInputEnvelope
    set?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    disconnect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    delete?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    update?: GardiennageUpdateWithWhereUniqueWithoutPlanteInput | GardiennageUpdateWithWhereUniqueWithoutPlanteInput[]
    updateMany?: GardiennageUpdateManyWithWhereWithoutPlanteInput | GardiennageUpdateManyWithWhereWithoutPlanteInput[]
    deleteMany?: GardiennageScalarWhereInput | GardiennageScalarWhereInput[]
  }

  export type ConseilUncheckedUpdateManyWithoutPlanteNestedInput = {
    create?: XOR<ConseilCreateWithoutPlanteInput, ConseilUncheckedCreateWithoutPlanteInput> | ConseilCreateWithoutPlanteInput[] | ConseilUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: ConseilCreateOrConnectWithoutPlanteInput | ConseilCreateOrConnectWithoutPlanteInput[]
    upsert?: ConseilUpsertWithWhereUniqueWithoutPlanteInput | ConseilUpsertWithWhereUniqueWithoutPlanteInput[]
    createMany?: ConseilCreateManyPlanteInputEnvelope
    set?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    disconnect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    delete?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    connect?: ConseilWhereUniqueInput | ConseilWhereUniqueInput[]
    update?: ConseilUpdateWithWhereUniqueWithoutPlanteInput | ConseilUpdateWithWhereUniqueWithoutPlanteInput[]
    updateMany?: ConseilUpdateManyWithWhereWithoutPlanteInput | ConseilUpdateManyWithWhereWithoutPlanteInput[]
    deleteMany?: ConseilScalarWhereInput | ConseilScalarWhereInput[]
  }

  export type GardiennageUncheckedUpdateManyWithoutPlanteNestedInput = {
    create?: XOR<GardiennageCreateWithoutPlanteInput, GardiennageUncheckedCreateWithoutPlanteInput> | GardiennageCreateWithoutPlanteInput[] | GardiennageUncheckedCreateWithoutPlanteInput[]
    connectOrCreate?: GardiennageCreateOrConnectWithoutPlanteInput | GardiennageCreateOrConnectWithoutPlanteInput[]
    upsert?: GardiennageUpsertWithWhereUniqueWithoutPlanteInput | GardiennageUpsertWithWhereUniqueWithoutPlanteInput[]
    createMany?: GardiennageCreateManyPlanteInputEnvelope
    set?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    disconnect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    delete?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    connect?: GardiennageWhereUniqueInput | GardiennageWhereUniqueInput[]
    update?: GardiennageUpdateWithWhereUniqueWithoutPlanteInput | GardiennageUpdateWithWhereUniqueWithoutPlanteInput[]
    updateMany?: GardiennageUpdateManyWithWhereWithoutPlanteInput | GardiennageUpdateManyWithWhereWithoutPlanteInput[]
    deleteMany?: GardiennageScalarWhereInput | GardiennageScalarWhereInput[]
  }

  export type AvoirRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<AvoirRoleCreateWithoutRoleInput, AvoirRoleUncheckedCreateWithoutRoleInput> | AvoirRoleCreateWithoutRoleInput[] | AvoirRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutRoleInput | AvoirRoleCreateOrConnectWithoutRoleInput[]
    createMany?: AvoirRoleCreateManyRoleInputEnvelope
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
  }

  export type AvoirRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<AvoirRoleCreateWithoutRoleInput, AvoirRoleUncheckedCreateWithoutRoleInput> | AvoirRoleCreateWithoutRoleInput[] | AvoirRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutRoleInput | AvoirRoleCreateOrConnectWithoutRoleInput[]
    createMany?: AvoirRoleCreateManyRoleInputEnvelope
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
  }

  export type AvoirRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<AvoirRoleCreateWithoutRoleInput, AvoirRoleUncheckedCreateWithoutRoleInput> | AvoirRoleCreateWithoutRoleInput[] | AvoirRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutRoleInput | AvoirRoleCreateOrConnectWithoutRoleInput[]
    upsert?: AvoirRoleUpsertWithWhereUniqueWithoutRoleInput | AvoirRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: AvoirRoleCreateManyRoleInputEnvelope
    set?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    disconnect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    delete?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    update?: AvoirRoleUpdateWithWhereUniqueWithoutRoleInput | AvoirRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: AvoirRoleUpdateManyWithWhereWithoutRoleInput | AvoirRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: AvoirRoleScalarWhereInput | AvoirRoleScalarWhereInput[]
  }

  export type AvoirRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<AvoirRoleCreateWithoutRoleInput, AvoirRoleUncheckedCreateWithoutRoleInput> | AvoirRoleCreateWithoutRoleInput[] | AvoirRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: AvoirRoleCreateOrConnectWithoutRoleInput | AvoirRoleCreateOrConnectWithoutRoleInput[]
    upsert?: AvoirRoleUpsertWithWhereUniqueWithoutRoleInput | AvoirRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: AvoirRoleCreateManyRoleInputEnvelope
    set?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    disconnect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    delete?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    connect?: AvoirRoleWhereUniqueInput | AvoirRoleWhereUniqueInput[]
    update?: AvoirRoleUpdateWithWhereUniqueWithoutRoleInput | AvoirRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: AvoirRoleUpdateManyWithWhereWithoutRoleInput | AvoirRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: AvoirRoleScalarWhereInput | AvoirRoleScalarWhereInput[]
  }

  export type PlanteCreateNestedOneWithoutConseilsInput = {
    create?: XOR<PlanteCreateWithoutConseilsInput, PlanteUncheckedCreateWithoutConseilsInput>
    connectOrCreate?: PlanteCreateOrConnectWithoutConseilsInput
    connect?: PlanteWhereUniqueInput
  }

  export type UtilisateurCreateNestedOneWithoutConseilsInput = {
    create?: XOR<UtilisateurCreateWithoutConseilsInput, UtilisateurUncheckedCreateWithoutConseilsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConseilsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type PlanteUpdateOneRequiredWithoutConseilsNestedInput = {
    create?: XOR<PlanteCreateWithoutConseilsInput, PlanteUncheckedCreateWithoutConseilsInput>
    connectOrCreate?: PlanteCreateOrConnectWithoutConseilsInput
    upsert?: PlanteUpsertWithoutConseilsInput
    connect?: PlanteWhereUniqueInput
    update?: XOR<XOR<PlanteUpdateToOneWithWhereWithoutConseilsInput, PlanteUpdateWithoutConseilsInput>, PlanteUncheckedUpdateWithoutConseilsInput>
  }

  export type UtilisateurUpdateOneRequiredWithoutConseilsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutConseilsInput, UtilisateurUncheckedCreateWithoutConseilsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConseilsInput
    upsert?: UtilisateurUpsertWithoutConseilsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutConseilsInput, UtilisateurUpdateWithoutConseilsInput>, UtilisateurUncheckedUpdateWithoutConseilsInput>
  }

  export type UtilisateurCreateNestedOneWithoutGardiennagesInput = {
    create?: XOR<UtilisateurCreateWithoutGardiennagesInput, UtilisateurUncheckedCreateWithoutGardiennagesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutGardiennagesInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type PlanteCreateNestedOneWithoutGardiennagesInput = {
    create?: XOR<PlanteCreateWithoutGardiennagesInput, PlanteUncheckedCreateWithoutGardiennagesInput>
    connectOrCreate?: PlanteCreateOrConnectWithoutGardiennagesInput
    connect?: PlanteWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutGardiennageInput = {
    create?: XOR<ConversationCreateWithoutGardiennageInput, ConversationUncheckedCreateWithoutGardiennageInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutGardiennageInput
    connect?: ConversationWhereUniqueInput
  }

  export type ConversationUncheckedCreateNestedOneWithoutGardiennageInput = {
    create?: XOR<ConversationCreateWithoutGardiennageInput, ConversationUncheckedCreateWithoutGardiennageInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutGardiennageInput
    connect?: ConversationWhereUniqueInput
  }

  export type UtilisateurUpdateOneWithoutGardiennagesNestedInput = {
    create?: XOR<UtilisateurCreateWithoutGardiennagesInput, UtilisateurUncheckedCreateWithoutGardiennagesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutGardiennagesInput
    upsert?: UtilisateurUpsertWithoutGardiennagesInput
    disconnect?: UtilisateurWhereInput | boolean
    delete?: UtilisateurWhereInput | boolean
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutGardiennagesInput, UtilisateurUpdateWithoutGardiennagesInput>, UtilisateurUncheckedUpdateWithoutGardiennagesInput>
  }

  export type PlanteUpdateOneRequiredWithoutGardiennagesNestedInput = {
    create?: XOR<PlanteCreateWithoutGardiennagesInput, PlanteUncheckedCreateWithoutGardiennagesInput>
    connectOrCreate?: PlanteCreateOrConnectWithoutGardiennagesInput
    upsert?: PlanteUpsertWithoutGardiennagesInput
    connect?: PlanteWhereUniqueInput
    update?: XOR<XOR<PlanteUpdateToOneWithWhereWithoutGardiennagesInput, PlanteUpdateWithoutGardiennagesInput>, PlanteUncheckedUpdateWithoutGardiennagesInput>
  }

  export type ConversationUpdateOneWithoutGardiennageNestedInput = {
    create?: XOR<ConversationCreateWithoutGardiennageInput, ConversationUncheckedCreateWithoutGardiennageInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutGardiennageInput
    upsert?: ConversationUpsertWithoutGardiennageInput
    disconnect?: ConversationWhereInput | boolean
    delete?: ConversationWhereInput | boolean
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutGardiennageInput, ConversationUpdateWithoutGardiennageInput>, ConversationUncheckedUpdateWithoutGardiennageInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ConversationUncheckedUpdateOneWithoutGardiennageNestedInput = {
    create?: XOR<ConversationCreateWithoutGardiennageInput, ConversationUncheckedCreateWithoutGardiennageInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutGardiennageInput
    upsert?: ConversationUpsertWithoutGardiennageInput
    disconnect?: ConversationWhereInput | boolean
    delete?: ConversationWhereInput | boolean
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutGardiennageInput, ConversationUpdateWithoutGardiennageInput>, ConversationUncheckedUpdateWithoutGardiennageInput>
  }

  export type UtilisateurCreateNestedOneWithoutConversationsInput = {
    create?: XOR<UtilisateurCreateWithoutConversationsInput, UtilisateurUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConversationsInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type UtilisateurCreateNestedOneWithoutConversations2Input = {
    create?: XOR<UtilisateurCreateWithoutConversations2Input, UtilisateurUncheckedCreateWithoutConversations2Input>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConversations2Input
    connect?: UtilisateurWhereUniqueInput
  }

  export type GardiennageCreateNestedOneWithoutConversationInput = {
    create?: XOR<GardiennageCreateWithoutConversationInput, GardiennageUncheckedCreateWithoutConversationInput>
    connectOrCreate?: GardiennageCreateOrConnectWithoutConversationInput
    connect?: GardiennageWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UtilisateurUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<UtilisateurCreateWithoutConversationsInput, UtilisateurUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConversationsInput
    upsert?: UtilisateurUpsertWithoutConversationsInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutConversationsInput, UtilisateurUpdateWithoutConversationsInput>, UtilisateurUncheckedUpdateWithoutConversationsInput>
  }

  export type UtilisateurUpdateOneRequiredWithoutConversations2NestedInput = {
    create?: XOR<UtilisateurCreateWithoutConversations2Input, UtilisateurUncheckedCreateWithoutConversations2Input>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutConversations2Input
    upsert?: UtilisateurUpsertWithoutConversations2Input
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutConversations2Input, UtilisateurUpdateWithoutConversations2Input>, UtilisateurUncheckedUpdateWithoutConversations2Input>
  }

  export type GardiennageUpdateOneRequiredWithoutConversationNestedInput = {
    create?: XOR<GardiennageCreateWithoutConversationInput, GardiennageUncheckedCreateWithoutConversationInput>
    connectOrCreate?: GardiennageCreateOrConnectWithoutConversationInput
    upsert?: GardiennageUpsertWithoutConversationInput
    connect?: GardiennageWhereUniqueInput
    update?: XOR<XOR<GardiennageUpdateToOneWithWhereWithoutConversationInput, GardiennageUpdateWithoutConversationInput>, GardiennageUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UtilisateurCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UtilisateurCreateWithoutMessagesInput, UtilisateurUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutMessagesInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UtilisateurUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UtilisateurCreateWithoutMessagesInput, UtilisateurUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutMessagesInput
    upsert?: UtilisateurUpsertWithoutMessagesInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutMessagesInput, UtilisateurUpdateWithoutMessagesInput>, UtilisateurUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    upsert?: ConversationUpsertWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutMessagesInput, ConversationUpdateWithoutMessagesInput>, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type UtilisateurCreateNestedOneWithoutRolesInput = {
    create?: XOR<UtilisateurCreateWithoutRolesInput, UtilisateurUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutRolesInput
    connect?: UtilisateurWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUtilisateursInput = {
    create?: XOR<RoleCreateWithoutUtilisateursInput, RoleUncheckedCreateWithoutUtilisateursInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUtilisateursInput
    connect?: RoleWhereUniqueInput
  }

  export type UtilisateurUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UtilisateurCreateWithoutRolesInput, UtilisateurUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UtilisateurCreateOrConnectWithoutRolesInput
    upsert?: UtilisateurUpsertWithoutRolesInput
    connect?: UtilisateurWhereUniqueInput
    update?: XOR<XOR<UtilisateurUpdateToOneWithWhereWithoutRolesInput, UtilisateurUpdateWithoutRolesInput>, UtilisateurUncheckedUpdateWithoutRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUtilisateursNestedInput = {
    create?: XOR<RoleCreateWithoutUtilisateursInput, RoleUncheckedCreateWithoutUtilisateursInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUtilisateursInput
    upsert?: RoleUpsertWithoutUtilisateursInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUtilisateursInput, RoleUpdateWithoutUtilisateursInput>, RoleUncheckedUpdateWithoutUtilisateursInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PlanteCreateWithoutUtilisateurInput = {
    espece: string
    description: string
    nom: string
    adresse: string
    conseils?: ConseilCreateNestedManyWithoutPlanteInput
    gardiennages?: GardiennageCreateNestedManyWithoutPlanteInput
  }

  export type PlanteUncheckedCreateWithoutUtilisateurInput = {
    idPlante?: number
    espece: string
    description: string
    nom: string
    adresse: string
    conseils?: ConseilUncheckedCreateNestedManyWithoutPlanteInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutPlanteInput
  }

  export type PlanteCreateOrConnectWithoutUtilisateurInput = {
    where: PlanteWhereUniqueInput
    create: XOR<PlanteCreateWithoutUtilisateurInput, PlanteUncheckedCreateWithoutUtilisateurInput>
  }

  export type PlanteCreateManyUtilisateurInputEnvelope = {
    data: PlanteCreateManyUtilisateurInput | PlanteCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type ConseilCreateWithoutUtilisateurInput = {
    description: string
    plante: PlanteCreateNestedOneWithoutConseilsInput
  }

  export type ConseilUncheckedCreateWithoutUtilisateurInput = {
    idConseil?: number
    description: string
    idPlante: number
  }

  export type ConseilCreateOrConnectWithoutUtilisateurInput = {
    where: ConseilWhereUniqueInput
    create: XOR<ConseilCreateWithoutUtilisateurInput, ConseilUncheckedCreateWithoutUtilisateurInput>
  }

  export type ConseilCreateManyUtilisateurInputEnvelope = {
    data: ConseilCreateManyUtilisateurInput | ConseilCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type GardiennageCreateWithoutUtilisateurInput = {
    dateDebut: Date | string
    dateFin: Date | string
    plante: PlanteCreateNestedOneWithoutGardiennagesInput
    conversation?: ConversationCreateNestedOneWithoutGardiennageInput
  }

  export type GardiennageUncheckedCreateWithoutUtilisateurInput = {
    idGardiennage?: number
    dateDebut: Date | string
    dateFin: Date | string
    idPlante: number
    conversation?: ConversationUncheckedCreateNestedOneWithoutGardiennageInput
  }

  export type GardiennageCreateOrConnectWithoutUtilisateurInput = {
    where: GardiennageWhereUniqueInput
    create: XOR<GardiennageCreateWithoutUtilisateurInput, GardiennageUncheckedCreateWithoutUtilisateurInput>
  }

  export type GardiennageCreateManyUtilisateurInputEnvelope = {
    data: GardiennageCreateManyUtilisateurInput | GardiennageCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type ConversationCreateWithoutMembre1Input = {
    membre2: UtilisateurCreateNestedOneWithoutConversations2Input
    gardiennage: GardiennageCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMembre1Input = {
    idConversation?: number
    idUtilisateur_1: number
    idGardiennage: number
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutMembre1Input = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMembre1Input, ConversationUncheckedCreateWithoutMembre1Input>
  }

  export type ConversationCreateManyMembre1InputEnvelope = {
    data: ConversationCreateManyMembre1Input | ConversationCreateManyMembre1Input[]
    skipDuplicates?: boolean
  }

  export type ConversationCreateWithoutMembre2Input = {
    membre1: UtilisateurCreateNestedOneWithoutConversationsInput
    gardiennage: GardiennageCreateNestedOneWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMembre2Input = {
    idConversation?: number
    idUtilisateur: number
    idGardiennage: number
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutMembre2Input = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMembre2Input, ConversationUncheckedCreateWithoutMembre2Input>
  }

  export type ConversationCreateManyMembre2InputEnvelope = {
    data: ConversationCreateManyMembre2Input | ConversationCreateManyMembre2Input[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutUtilisateurInput = {
    dateEnvoi: string
    texte: string
    image?: string | null
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutUtilisateurInput = {
    idMessage?: number
    dateEnvoi: string
    texte: string
    image?: string | null
    idConversation: number
  }

  export type MessageCreateOrConnectWithoutUtilisateurInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUtilisateurInput, MessageUncheckedCreateWithoutUtilisateurInput>
  }

  export type MessageCreateManyUtilisateurInputEnvelope = {
    data: MessageCreateManyUtilisateurInput | MessageCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type AvoirRoleCreateWithoutUtilisateurInput = {
    role: RoleCreateNestedOneWithoutUtilisateursInput
  }

  export type AvoirRoleUncheckedCreateWithoutUtilisateurInput = {
    idRole: number
  }

  export type AvoirRoleCreateOrConnectWithoutUtilisateurInput = {
    where: AvoirRoleWhereUniqueInput
    create: XOR<AvoirRoleCreateWithoutUtilisateurInput, AvoirRoleUncheckedCreateWithoutUtilisateurInput>
  }

  export type AvoirRoleCreateManyUtilisateurInputEnvelope = {
    data: AvoirRoleCreateManyUtilisateurInput | AvoirRoleCreateManyUtilisateurInput[]
    skipDuplicates?: boolean
  }

  export type PlanteUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: PlanteWhereUniqueInput
    update: XOR<PlanteUpdateWithoutUtilisateurInput, PlanteUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<PlanteCreateWithoutUtilisateurInput, PlanteUncheckedCreateWithoutUtilisateurInput>
  }

  export type PlanteUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: PlanteWhereUniqueInput
    data: XOR<PlanteUpdateWithoutUtilisateurInput, PlanteUncheckedUpdateWithoutUtilisateurInput>
  }

  export type PlanteUpdateManyWithWhereWithoutUtilisateurInput = {
    where: PlanteScalarWhereInput
    data: XOR<PlanteUpdateManyMutationInput, PlanteUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type PlanteScalarWhereInput = {
    AND?: PlanteScalarWhereInput | PlanteScalarWhereInput[]
    OR?: PlanteScalarWhereInput[]
    NOT?: PlanteScalarWhereInput | PlanteScalarWhereInput[]
    idPlante?: IntFilter<"Plante"> | number
    espece?: StringFilter<"Plante"> | string
    description?: StringFilter<"Plante"> | string
    nom?: StringFilter<"Plante"> | string
    adresse?: StringFilter<"Plante"> | string
    idUtilisateur?: IntFilter<"Plante"> | number
  }

  export type ConseilUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: ConseilWhereUniqueInput
    update: XOR<ConseilUpdateWithoutUtilisateurInput, ConseilUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<ConseilCreateWithoutUtilisateurInput, ConseilUncheckedCreateWithoutUtilisateurInput>
  }

  export type ConseilUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: ConseilWhereUniqueInput
    data: XOR<ConseilUpdateWithoutUtilisateurInput, ConseilUncheckedUpdateWithoutUtilisateurInput>
  }

  export type ConseilUpdateManyWithWhereWithoutUtilisateurInput = {
    where: ConseilScalarWhereInput
    data: XOR<ConseilUpdateManyMutationInput, ConseilUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type ConseilScalarWhereInput = {
    AND?: ConseilScalarWhereInput | ConseilScalarWhereInput[]
    OR?: ConseilScalarWhereInput[]
    NOT?: ConseilScalarWhereInput | ConseilScalarWhereInput[]
    idConseil?: IntFilter<"Conseil"> | number
    description?: StringFilter<"Conseil"> | string
    idPlante?: IntFilter<"Conseil"> | number
    idUtilisateur?: IntFilter<"Conseil"> | number
  }

  export type GardiennageUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: GardiennageWhereUniqueInput
    update: XOR<GardiennageUpdateWithoutUtilisateurInput, GardiennageUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<GardiennageCreateWithoutUtilisateurInput, GardiennageUncheckedCreateWithoutUtilisateurInput>
  }

  export type GardiennageUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: GardiennageWhereUniqueInput
    data: XOR<GardiennageUpdateWithoutUtilisateurInput, GardiennageUncheckedUpdateWithoutUtilisateurInput>
  }

  export type GardiennageUpdateManyWithWhereWithoutUtilisateurInput = {
    where: GardiennageScalarWhereInput
    data: XOR<GardiennageUpdateManyMutationInput, GardiennageUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type GardiennageScalarWhereInput = {
    AND?: GardiennageScalarWhereInput | GardiennageScalarWhereInput[]
    OR?: GardiennageScalarWhereInput[]
    NOT?: GardiennageScalarWhereInput | GardiennageScalarWhereInput[]
    idGardiennage?: IntFilter<"Gardiennage"> | number
    dateDebut?: DateTimeFilter<"Gardiennage"> | Date | string
    dateFin?: DateTimeFilter<"Gardiennage"> | Date | string
    idUtilisateur?: IntNullableFilter<"Gardiennage"> | number | null
    idPlante?: IntFilter<"Gardiennage"> | number
  }

  export type ConversationUpsertWithWhereUniqueWithoutMembre1Input = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutMembre1Input, ConversationUncheckedUpdateWithoutMembre1Input>
    create: XOR<ConversationCreateWithoutMembre1Input, ConversationUncheckedCreateWithoutMembre1Input>
  }

  export type ConversationUpdateWithWhereUniqueWithoutMembre1Input = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutMembre1Input, ConversationUncheckedUpdateWithoutMembre1Input>
  }

  export type ConversationUpdateManyWithWhereWithoutMembre1Input = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutMembre1Input>
  }

  export type ConversationScalarWhereInput = {
    AND?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    OR?: ConversationScalarWhereInput[]
    NOT?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    idConversation?: IntFilter<"Conversation"> | number
    idUtilisateur?: IntFilter<"Conversation"> | number
    idUtilisateur_1?: IntFilter<"Conversation"> | number
    idGardiennage?: IntFilter<"Conversation"> | number
  }

  export type ConversationUpsertWithWhereUniqueWithoutMembre2Input = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutMembre2Input, ConversationUncheckedUpdateWithoutMembre2Input>
    create: XOR<ConversationCreateWithoutMembre2Input, ConversationUncheckedCreateWithoutMembre2Input>
  }

  export type ConversationUpdateWithWhereUniqueWithoutMembre2Input = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutMembre2Input, ConversationUncheckedUpdateWithoutMembre2Input>
  }

  export type ConversationUpdateManyWithWhereWithoutMembre2Input = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutMembre2Input>
  }

  export type MessageUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUtilisateurInput, MessageUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<MessageCreateWithoutUtilisateurInput, MessageUncheckedCreateWithoutUtilisateurInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUtilisateurInput, MessageUncheckedUpdateWithoutUtilisateurInput>
  }

  export type MessageUpdateManyWithWhereWithoutUtilisateurInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    idMessage?: IntFilter<"Message"> | number
    dateEnvoi?: StringFilter<"Message"> | string
    texte?: StringFilter<"Message"> | string
    image?: StringNullableFilter<"Message"> | string | null
    idUtilisateur?: IntFilter<"Message"> | number
    idConversation?: IntFilter<"Message"> | number
  }

  export type AvoirRoleUpsertWithWhereUniqueWithoutUtilisateurInput = {
    where: AvoirRoleWhereUniqueInput
    update: XOR<AvoirRoleUpdateWithoutUtilisateurInput, AvoirRoleUncheckedUpdateWithoutUtilisateurInput>
    create: XOR<AvoirRoleCreateWithoutUtilisateurInput, AvoirRoleUncheckedCreateWithoutUtilisateurInput>
  }

  export type AvoirRoleUpdateWithWhereUniqueWithoutUtilisateurInput = {
    where: AvoirRoleWhereUniqueInput
    data: XOR<AvoirRoleUpdateWithoutUtilisateurInput, AvoirRoleUncheckedUpdateWithoutUtilisateurInput>
  }

  export type AvoirRoleUpdateManyWithWhereWithoutUtilisateurInput = {
    where: AvoirRoleScalarWhereInput
    data: XOR<AvoirRoleUpdateManyMutationInput, AvoirRoleUncheckedUpdateManyWithoutUtilisateurInput>
  }

  export type AvoirRoleScalarWhereInput = {
    AND?: AvoirRoleScalarWhereInput | AvoirRoleScalarWhereInput[]
    OR?: AvoirRoleScalarWhereInput[]
    NOT?: AvoirRoleScalarWhereInput | AvoirRoleScalarWhereInput[]
    idUtilisateur?: IntFilter<"AvoirRole"> | number
    idRole?: IntFilter<"AvoirRole"> | number
  }

  export type UtilisateurCreateWithoutPlantesInput = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    conseils?: ConseilCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationCreateNestedManyWithoutMembre2Input
    messages?: MessageCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutPlantesInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    conseils?: ConseilUncheckedCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationUncheckedCreateNestedManyWithoutMembre2Input
    messages?: MessageUncheckedCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutPlantesInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutPlantesInput, UtilisateurUncheckedCreateWithoutPlantesInput>
  }

  export type ConseilCreateWithoutPlanteInput = {
    description: string
    utilisateur: UtilisateurCreateNestedOneWithoutConseilsInput
  }

  export type ConseilUncheckedCreateWithoutPlanteInput = {
    idConseil?: number
    description: string
    idUtilisateur: number
  }

  export type ConseilCreateOrConnectWithoutPlanteInput = {
    where: ConseilWhereUniqueInput
    create: XOR<ConseilCreateWithoutPlanteInput, ConseilUncheckedCreateWithoutPlanteInput>
  }

  export type ConseilCreateManyPlanteInputEnvelope = {
    data: ConseilCreateManyPlanteInput | ConseilCreateManyPlanteInput[]
    skipDuplicates?: boolean
  }

  export type GardiennageCreateWithoutPlanteInput = {
    dateDebut: Date | string
    dateFin: Date | string
    utilisateur?: UtilisateurCreateNestedOneWithoutGardiennagesInput
    conversation?: ConversationCreateNestedOneWithoutGardiennageInput
  }

  export type GardiennageUncheckedCreateWithoutPlanteInput = {
    idGardiennage?: number
    dateDebut: Date | string
    dateFin: Date | string
    idUtilisateur?: number | null
    conversation?: ConversationUncheckedCreateNestedOneWithoutGardiennageInput
  }

  export type GardiennageCreateOrConnectWithoutPlanteInput = {
    where: GardiennageWhereUniqueInput
    create: XOR<GardiennageCreateWithoutPlanteInput, GardiennageUncheckedCreateWithoutPlanteInput>
  }

  export type GardiennageCreateManyPlanteInputEnvelope = {
    data: GardiennageCreateManyPlanteInput | GardiennageCreateManyPlanteInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurUpsertWithoutPlantesInput = {
    update: XOR<UtilisateurUpdateWithoutPlantesInput, UtilisateurUncheckedUpdateWithoutPlantesInput>
    create: XOR<UtilisateurCreateWithoutPlantesInput, UtilisateurUncheckedCreateWithoutPlantesInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutPlantesInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutPlantesInput, UtilisateurUncheckedUpdateWithoutPlantesInput>
  }

  export type UtilisateurUpdateWithoutPlantesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    conseils?: ConseilUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUpdateManyWithoutMembre2NestedInput
    messages?: MessageUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutPlantesInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    conseils?: ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUncheckedUpdateManyWithoutMembre2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type ConseilUpsertWithWhereUniqueWithoutPlanteInput = {
    where: ConseilWhereUniqueInput
    update: XOR<ConseilUpdateWithoutPlanteInput, ConseilUncheckedUpdateWithoutPlanteInput>
    create: XOR<ConseilCreateWithoutPlanteInput, ConseilUncheckedCreateWithoutPlanteInput>
  }

  export type ConseilUpdateWithWhereUniqueWithoutPlanteInput = {
    where: ConseilWhereUniqueInput
    data: XOR<ConseilUpdateWithoutPlanteInput, ConseilUncheckedUpdateWithoutPlanteInput>
  }

  export type ConseilUpdateManyWithWhereWithoutPlanteInput = {
    where: ConseilScalarWhereInput
    data: XOR<ConseilUpdateManyMutationInput, ConseilUncheckedUpdateManyWithoutPlanteInput>
  }

  export type GardiennageUpsertWithWhereUniqueWithoutPlanteInput = {
    where: GardiennageWhereUniqueInput
    update: XOR<GardiennageUpdateWithoutPlanteInput, GardiennageUncheckedUpdateWithoutPlanteInput>
    create: XOR<GardiennageCreateWithoutPlanteInput, GardiennageUncheckedCreateWithoutPlanteInput>
  }

  export type GardiennageUpdateWithWhereUniqueWithoutPlanteInput = {
    where: GardiennageWhereUniqueInput
    data: XOR<GardiennageUpdateWithoutPlanteInput, GardiennageUncheckedUpdateWithoutPlanteInput>
  }

  export type GardiennageUpdateManyWithWhereWithoutPlanteInput = {
    where: GardiennageScalarWhereInput
    data: XOR<GardiennageUpdateManyMutationInput, GardiennageUncheckedUpdateManyWithoutPlanteInput>
  }

  export type AvoirRoleCreateWithoutRoleInput = {
    utilisateur: UtilisateurCreateNestedOneWithoutRolesInput
  }

  export type AvoirRoleUncheckedCreateWithoutRoleInput = {
    idUtilisateur: number
  }

  export type AvoirRoleCreateOrConnectWithoutRoleInput = {
    where: AvoirRoleWhereUniqueInput
    create: XOR<AvoirRoleCreateWithoutRoleInput, AvoirRoleUncheckedCreateWithoutRoleInput>
  }

  export type AvoirRoleCreateManyRoleInputEnvelope = {
    data: AvoirRoleCreateManyRoleInput | AvoirRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type AvoirRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: AvoirRoleWhereUniqueInput
    update: XOR<AvoirRoleUpdateWithoutRoleInput, AvoirRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<AvoirRoleCreateWithoutRoleInput, AvoirRoleUncheckedCreateWithoutRoleInput>
  }

  export type AvoirRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: AvoirRoleWhereUniqueInput
    data: XOR<AvoirRoleUpdateWithoutRoleInput, AvoirRoleUncheckedUpdateWithoutRoleInput>
  }

  export type AvoirRoleUpdateManyWithWhereWithoutRoleInput = {
    where: AvoirRoleScalarWhereInput
    data: XOR<AvoirRoleUpdateManyMutationInput, AvoirRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type PlanteCreateWithoutConseilsInput = {
    espece: string
    description: string
    nom: string
    adresse: string
    utilisateur: UtilisateurCreateNestedOneWithoutPlantesInput
    gardiennages?: GardiennageCreateNestedManyWithoutPlanteInput
  }

  export type PlanteUncheckedCreateWithoutConseilsInput = {
    idPlante?: number
    espece: string
    description: string
    nom: string
    adresse: string
    idUtilisateur: number
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutPlanteInput
  }

  export type PlanteCreateOrConnectWithoutConseilsInput = {
    where: PlanteWhereUniqueInput
    create: XOR<PlanteCreateWithoutConseilsInput, PlanteUncheckedCreateWithoutConseilsInput>
  }

  export type UtilisateurCreateWithoutConseilsInput = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationCreateNestedManyWithoutMembre2Input
    messages?: MessageCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutConseilsInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteUncheckedCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationUncheckedCreateNestedManyWithoutMembre2Input
    messages?: MessageUncheckedCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutConseilsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutConseilsInput, UtilisateurUncheckedCreateWithoutConseilsInput>
  }

  export type PlanteUpsertWithoutConseilsInput = {
    update: XOR<PlanteUpdateWithoutConseilsInput, PlanteUncheckedUpdateWithoutConseilsInput>
    create: XOR<PlanteCreateWithoutConseilsInput, PlanteUncheckedCreateWithoutConseilsInput>
    where?: PlanteWhereInput
  }

  export type PlanteUpdateToOneWithWhereWithoutConseilsInput = {
    where?: PlanteWhereInput
    data: XOR<PlanteUpdateWithoutConseilsInput, PlanteUncheckedUpdateWithoutConseilsInput>
  }

  export type PlanteUpdateWithoutConseilsInput = {
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutPlantesNestedInput
    gardiennages?: GardiennageUpdateManyWithoutPlanteNestedInput
  }

  export type PlanteUncheckedUpdateWithoutConseilsInput = {
    idPlante?: IntFieldUpdateOperationsInput | number
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    gardiennages?: GardiennageUncheckedUpdateManyWithoutPlanteNestedInput
  }

  export type UtilisateurUpsertWithoutConseilsInput = {
    update: XOR<UtilisateurUpdateWithoutConseilsInput, UtilisateurUncheckedUpdateWithoutConseilsInput>
    create: XOR<UtilisateurCreateWithoutConseilsInput, UtilisateurUncheckedCreateWithoutConseilsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutConseilsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutConseilsInput, UtilisateurUncheckedUpdateWithoutConseilsInput>
  }

  export type UtilisateurUpdateWithoutConseilsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUpdateManyWithoutMembre2NestedInput
    messages?: MessageUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutConseilsInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUncheckedUpdateManyWithoutMembre2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurCreateWithoutGardiennagesInput = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationCreateNestedManyWithoutMembre2Input
    messages?: MessageCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutGardiennagesInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteUncheckedCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationUncheckedCreateNestedManyWithoutMembre2Input
    messages?: MessageUncheckedCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutGardiennagesInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutGardiennagesInput, UtilisateurUncheckedCreateWithoutGardiennagesInput>
  }

  export type PlanteCreateWithoutGardiennagesInput = {
    espece: string
    description: string
    nom: string
    adresse: string
    utilisateur: UtilisateurCreateNestedOneWithoutPlantesInput
    conseils?: ConseilCreateNestedManyWithoutPlanteInput
  }

  export type PlanteUncheckedCreateWithoutGardiennagesInput = {
    idPlante?: number
    espece: string
    description: string
    nom: string
    adresse: string
    idUtilisateur: number
    conseils?: ConseilUncheckedCreateNestedManyWithoutPlanteInput
  }

  export type PlanteCreateOrConnectWithoutGardiennagesInput = {
    where: PlanteWhereUniqueInput
    create: XOR<PlanteCreateWithoutGardiennagesInput, PlanteUncheckedCreateWithoutGardiennagesInput>
  }

  export type ConversationCreateWithoutGardiennageInput = {
    membre1: UtilisateurCreateNestedOneWithoutConversationsInput
    membre2: UtilisateurCreateNestedOneWithoutConversations2Input
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutGardiennageInput = {
    idConversation?: number
    idUtilisateur: number
    idUtilisateur_1: number
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutGardiennageInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutGardiennageInput, ConversationUncheckedCreateWithoutGardiennageInput>
  }

  export type UtilisateurUpsertWithoutGardiennagesInput = {
    update: XOR<UtilisateurUpdateWithoutGardiennagesInput, UtilisateurUncheckedUpdateWithoutGardiennagesInput>
    create: XOR<UtilisateurCreateWithoutGardiennagesInput, UtilisateurUncheckedCreateWithoutGardiennagesInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutGardiennagesInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutGardiennagesInput, UtilisateurUncheckedUpdateWithoutGardiennagesInput>
  }

  export type UtilisateurUpdateWithoutGardiennagesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUpdateManyWithoutMembre2NestedInput
    messages?: MessageUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutGardiennagesInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUncheckedUpdateManyWithoutMembre2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type PlanteUpsertWithoutGardiennagesInput = {
    update: XOR<PlanteUpdateWithoutGardiennagesInput, PlanteUncheckedUpdateWithoutGardiennagesInput>
    create: XOR<PlanteCreateWithoutGardiennagesInput, PlanteUncheckedCreateWithoutGardiennagesInput>
    where?: PlanteWhereInput
  }

  export type PlanteUpdateToOneWithWhereWithoutGardiennagesInput = {
    where?: PlanteWhereInput
    data: XOR<PlanteUpdateWithoutGardiennagesInput, PlanteUncheckedUpdateWithoutGardiennagesInput>
  }

  export type PlanteUpdateWithoutGardiennagesInput = {
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutPlantesNestedInput
    conseils?: ConseilUpdateManyWithoutPlanteNestedInput
  }

  export type PlanteUncheckedUpdateWithoutGardiennagesInput = {
    idPlante?: IntFieldUpdateOperationsInput | number
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    conseils?: ConseilUncheckedUpdateManyWithoutPlanteNestedInput
  }

  export type ConversationUpsertWithoutGardiennageInput = {
    update: XOR<ConversationUpdateWithoutGardiennageInput, ConversationUncheckedUpdateWithoutGardiennageInput>
    create: XOR<ConversationCreateWithoutGardiennageInput, ConversationUncheckedCreateWithoutGardiennageInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutGardiennageInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutGardiennageInput, ConversationUncheckedUpdateWithoutGardiennageInput>
  }

  export type ConversationUpdateWithoutGardiennageInput = {
    membre1?: UtilisateurUpdateOneRequiredWithoutConversationsNestedInput
    membre2?: UtilisateurUpdateOneRequiredWithoutConversations2NestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutGardiennageInput = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idUtilisateur_1?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type UtilisateurCreateWithoutConversationsInput = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageCreateNestedManyWithoutUtilisateurInput
    conversations2?: ConversationCreateNestedManyWithoutMembre2Input
    messages?: MessageCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutConversationsInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteUncheckedCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilUncheckedCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations2?: ConversationUncheckedCreateNestedManyWithoutMembre2Input
    messages?: MessageUncheckedCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutConversationsInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutConversationsInput, UtilisateurUncheckedCreateWithoutConversationsInput>
  }

  export type UtilisateurCreateWithoutConversations2Input = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationCreateNestedManyWithoutMembre1Input
    messages?: MessageCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutConversations2Input = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteUncheckedCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilUncheckedCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutMembre1Input
    messages?: MessageUncheckedCreateNestedManyWithoutUtilisateurInput
    roles?: AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutConversations2Input = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutConversations2Input, UtilisateurUncheckedCreateWithoutConversations2Input>
  }

  export type GardiennageCreateWithoutConversationInput = {
    dateDebut: Date | string
    dateFin: Date | string
    utilisateur?: UtilisateurCreateNestedOneWithoutGardiennagesInput
    plante: PlanteCreateNestedOneWithoutGardiennagesInput
  }

  export type GardiennageUncheckedCreateWithoutConversationInput = {
    idGardiennage?: number
    dateDebut: Date | string
    dateFin: Date | string
    idUtilisateur?: number | null
    idPlante: number
  }

  export type GardiennageCreateOrConnectWithoutConversationInput = {
    where: GardiennageWhereUniqueInput
    create: XOR<GardiennageCreateWithoutConversationInput, GardiennageUncheckedCreateWithoutConversationInput>
  }

  export type MessageCreateWithoutConversationInput = {
    dateEnvoi: string
    texte: string
    image?: string | null
    utilisateur: UtilisateurCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutConversationInput = {
    idMessage?: number
    dateEnvoi: string
    texte: string
    image?: string | null
    idUtilisateur: number
  }

  export type MessageCreateOrConnectWithoutConversationInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageCreateManyConversationInputEnvelope = {
    data: MessageCreateManyConversationInput | MessageCreateManyConversationInput[]
    skipDuplicates?: boolean
  }

  export type UtilisateurUpsertWithoutConversationsInput = {
    update: XOR<UtilisateurUpdateWithoutConversationsInput, UtilisateurUncheckedUpdateWithoutConversationsInput>
    create: XOR<UtilisateurCreateWithoutConversationsInput, UtilisateurUncheckedCreateWithoutConversationsInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutConversationsInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutConversationsInput, UtilisateurUncheckedUpdateWithoutConversationsInput>
  }

  export type UtilisateurUpdateWithoutConversationsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUpdateManyWithoutUtilisateurNestedInput
    conversations2?: ConversationUpdateManyWithoutMembre2NestedInput
    messages?: MessageUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutConversationsInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations2?: ConversationUncheckedUpdateManyWithoutMembre2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUpsertWithoutConversations2Input = {
    update: XOR<UtilisateurUpdateWithoutConversations2Input, UtilisateurUncheckedUpdateWithoutConversations2Input>
    create: XOR<UtilisateurCreateWithoutConversations2Input, UtilisateurUncheckedCreateWithoutConversations2Input>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutConversations2Input = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutConversations2Input, UtilisateurUncheckedUpdateWithoutConversations2Input>
  }

  export type UtilisateurUpdateWithoutConversations2Input = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUpdateManyWithoutMembre1NestedInput
    messages?: MessageUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutConversations2Input = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutMembre1NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUtilisateurNestedInput
    roles?: AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type GardiennageUpsertWithoutConversationInput = {
    update: XOR<GardiennageUpdateWithoutConversationInput, GardiennageUncheckedUpdateWithoutConversationInput>
    create: XOR<GardiennageCreateWithoutConversationInput, GardiennageUncheckedCreateWithoutConversationInput>
    where?: GardiennageWhereInput
  }

  export type GardiennageUpdateToOneWithWhereWithoutConversationInput = {
    where?: GardiennageWhereInput
    data: XOR<GardiennageUpdateWithoutConversationInput, GardiennageUncheckedUpdateWithoutConversationInput>
  }

  export type GardiennageUpdateWithoutConversationInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneWithoutGardiennagesNestedInput
    plante?: PlanteUpdateOneRequiredWithoutGardiennagesNestedInput
  }

  export type GardiennageUncheckedUpdateWithoutConversationInput = {
    idGardiennage?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    idUtilisateur?: NullableIntFieldUpdateOperationsInput | number | null
    idPlante?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithWhereWithoutConversationInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutConversationInput>
  }

  export type UtilisateurCreateWithoutMessagesInput = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationCreateNestedManyWithoutMembre2Input
    roles?: AvoirRoleCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutMessagesInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteUncheckedCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilUncheckedCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationUncheckedCreateNestedManyWithoutMembre2Input
    roles?: AvoirRoleUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutMessagesInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutMessagesInput, UtilisateurUncheckedCreateWithoutMessagesInput>
  }

  export type ConversationCreateWithoutMessagesInput = {
    membre1: UtilisateurCreateNestedOneWithoutConversationsInput
    membre2: UtilisateurCreateNestedOneWithoutConversations2Input
    gardiennage: GardiennageCreateNestedOneWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMessagesInput = {
    idConversation?: number
    idUtilisateur: number
    idUtilisateur_1: number
    idGardiennage: number
  }

  export type ConversationCreateOrConnectWithoutMessagesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
  }

  export type UtilisateurUpsertWithoutMessagesInput = {
    update: XOR<UtilisateurUpdateWithoutMessagesInput, UtilisateurUncheckedUpdateWithoutMessagesInput>
    create: XOR<UtilisateurCreateWithoutMessagesInput, UtilisateurUncheckedCreateWithoutMessagesInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutMessagesInput, UtilisateurUncheckedUpdateWithoutMessagesInput>
  }

  export type UtilisateurUpdateWithoutMessagesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUpdateManyWithoutMembre2NestedInput
    roles?: AvoirRoleUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutMessagesInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUncheckedUpdateManyWithoutMembre2NestedInput
    roles?: AvoirRoleUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type ConversationUpsertWithoutMessagesInput = {
    update: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationUpdateWithoutMessagesInput = {
    membre1?: UtilisateurUpdateOneRequiredWithoutConversationsNestedInput
    membre2?: UtilisateurUpdateOneRequiredWithoutConversations2NestedInput
    gardiennage?: GardiennageUpdateOneRequiredWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMessagesInput = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idUtilisateur_1?: IntFieldUpdateOperationsInput | number
    idGardiennage?: IntFieldUpdateOperationsInput | number
  }

  export type UtilisateurCreateWithoutRolesInput = {
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationCreateNestedManyWithoutMembre2Input
    messages?: MessageCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurUncheckedCreateWithoutRolesInput = {
    idUtilisateur?: number
    nom: string
    prenom: string
    dateNaissance: Date | string
    numero: string
    email: string
    adresse: string
    pseudo: string
    motDePasse: string
    plantes?: PlanteUncheckedCreateNestedManyWithoutUtilisateurInput
    conseils?: ConseilUncheckedCreateNestedManyWithoutUtilisateurInput
    gardiennages?: GardiennageUncheckedCreateNestedManyWithoutUtilisateurInput
    conversations?: ConversationUncheckedCreateNestedManyWithoutMembre1Input
    conversations2?: ConversationUncheckedCreateNestedManyWithoutMembre2Input
    messages?: MessageUncheckedCreateNestedManyWithoutUtilisateurInput
  }

  export type UtilisateurCreateOrConnectWithoutRolesInput = {
    where: UtilisateurWhereUniqueInput
    create: XOR<UtilisateurCreateWithoutRolesInput, UtilisateurUncheckedCreateWithoutRolesInput>
  }

  export type RoleCreateWithoutUtilisateursInput = {
    libelle: string
  }

  export type RoleUncheckedCreateWithoutUtilisateursInput = {
    idRole?: number
    libelle: string
  }

  export type RoleCreateOrConnectWithoutUtilisateursInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUtilisateursInput, RoleUncheckedCreateWithoutUtilisateursInput>
  }

  export type UtilisateurUpsertWithoutRolesInput = {
    update: XOR<UtilisateurUpdateWithoutRolesInput, UtilisateurUncheckedUpdateWithoutRolesInput>
    create: XOR<UtilisateurCreateWithoutRolesInput, UtilisateurUncheckedCreateWithoutRolesInput>
    where?: UtilisateurWhereInput
  }

  export type UtilisateurUpdateToOneWithWhereWithoutRolesInput = {
    where?: UtilisateurWhereInput
    data: XOR<UtilisateurUpdateWithoutRolesInput, UtilisateurUncheckedUpdateWithoutRolesInput>
  }

  export type UtilisateurUpdateWithoutRolesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUpdateManyWithoutMembre2NestedInput
    messages?: MessageUpdateManyWithoutUtilisateurNestedInput
  }

  export type UtilisateurUncheckedUpdateWithoutRolesInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    dateNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    numero?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    motDePasse?: StringFieldUpdateOperationsInput | string
    plantes?: PlanteUncheckedUpdateManyWithoutUtilisateurNestedInput
    conseils?: ConseilUncheckedUpdateManyWithoutUtilisateurNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutUtilisateurNestedInput
    conversations?: ConversationUncheckedUpdateManyWithoutMembre1NestedInput
    conversations2?: ConversationUncheckedUpdateManyWithoutMembre2NestedInput
    messages?: MessageUncheckedUpdateManyWithoutUtilisateurNestedInput
  }

  export type RoleUpsertWithoutUtilisateursInput = {
    update: XOR<RoleUpdateWithoutUtilisateursInput, RoleUncheckedUpdateWithoutUtilisateursInput>
    create: XOR<RoleCreateWithoutUtilisateursInput, RoleUncheckedCreateWithoutUtilisateursInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUtilisateursInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUtilisateursInput, RoleUncheckedUpdateWithoutUtilisateursInput>
  }

  export type RoleUpdateWithoutUtilisateursInput = {
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUtilisateursInput = {
    idRole?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
  }

  export type PlanteCreateManyUtilisateurInput = {
    idPlante?: number
    espece: string
    description: string
    nom: string
    adresse: string
  }

  export type ConseilCreateManyUtilisateurInput = {
    idConseil?: number
    description: string
    idPlante: number
  }

  export type GardiennageCreateManyUtilisateurInput = {
    idGardiennage?: number
    dateDebut: Date | string
    dateFin: Date | string
    idPlante: number
  }

  export type ConversationCreateManyMembre1Input = {
    idConversation?: number
    idUtilisateur_1: number
    idGardiennage: number
  }

  export type ConversationCreateManyMembre2Input = {
    idConversation?: number
    idUtilisateur: number
    idGardiennage: number
  }

  export type MessageCreateManyUtilisateurInput = {
    idMessage?: number
    dateEnvoi: string
    texte: string
    image?: string | null
    idConversation: number
  }

  export type AvoirRoleCreateManyUtilisateurInput = {
    idRole: number
  }

  export type PlanteUpdateWithoutUtilisateurInput = {
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    conseils?: ConseilUpdateManyWithoutPlanteNestedInput
    gardiennages?: GardiennageUpdateManyWithoutPlanteNestedInput
  }

  export type PlanteUncheckedUpdateWithoutUtilisateurInput = {
    idPlante?: IntFieldUpdateOperationsInput | number
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
    conseils?: ConseilUncheckedUpdateManyWithoutPlanteNestedInput
    gardiennages?: GardiennageUncheckedUpdateManyWithoutPlanteNestedInput
  }

  export type PlanteUncheckedUpdateManyWithoutUtilisateurInput = {
    idPlante?: IntFieldUpdateOperationsInput | number
    espece?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    adresse?: StringFieldUpdateOperationsInput | string
  }

  export type ConseilUpdateWithoutUtilisateurInput = {
    description?: StringFieldUpdateOperationsInput | string
    plante?: PlanteUpdateOneRequiredWithoutConseilsNestedInput
  }

  export type ConseilUncheckedUpdateWithoutUtilisateurInput = {
    idConseil?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    idPlante?: IntFieldUpdateOperationsInput | number
  }

  export type ConseilUncheckedUpdateManyWithoutUtilisateurInput = {
    idConseil?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    idPlante?: IntFieldUpdateOperationsInput | number
  }

  export type GardiennageUpdateWithoutUtilisateurInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    plante?: PlanteUpdateOneRequiredWithoutGardiennagesNestedInput
    conversation?: ConversationUpdateOneWithoutGardiennageNestedInput
  }

  export type GardiennageUncheckedUpdateWithoutUtilisateurInput = {
    idGardiennage?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    idPlante?: IntFieldUpdateOperationsInput | number
    conversation?: ConversationUncheckedUpdateOneWithoutGardiennageNestedInput
  }

  export type GardiennageUncheckedUpdateManyWithoutUtilisateurInput = {
    idGardiennage?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    idPlante?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationUpdateWithoutMembre1Input = {
    membre2?: UtilisateurUpdateOneRequiredWithoutConversations2NestedInput
    gardiennage?: GardiennageUpdateOneRequiredWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMembre1Input = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur_1?: IntFieldUpdateOperationsInput | number
    idGardiennage?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutMembre1Input = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur_1?: IntFieldUpdateOperationsInput | number
    idGardiennage?: IntFieldUpdateOperationsInput | number
  }

  export type ConversationUpdateWithoutMembre2Input = {
    membre1?: UtilisateurUpdateOneRequiredWithoutConversationsNestedInput
    gardiennage?: GardiennageUpdateOneRequiredWithoutConversationNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMembre2Input = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idGardiennage?: IntFieldUpdateOperationsInput | number
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutMembre2Input = {
    idConversation?: IntFieldUpdateOperationsInput | number
    idUtilisateur?: IntFieldUpdateOperationsInput | number
    idGardiennage?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutUtilisateurInput = {
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutUtilisateurInput = {
    idMessage?: IntFieldUpdateOperationsInput | number
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    idConversation?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUncheckedUpdateManyWithoutUtilisateurInput = {
    idMessage?: IntFieldUpdateOperationsInput | number
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    idConversation?: IntFieldUpdateOperationsInput | number
  }

  export type AvoirRoleUpdateWithoutUtilisateurInput = {
    role?: RoleUpdateOneRequiredWithoutUtilisateursNestedInput
  }

  export type AvoirRoleUncheckedUpdateWithoutUtilisateurInput = {
    idRole?: IntFieldUpdateOperationsInput | number
  }

  export type AvoirRoleUncheckedUpdateManyWithoutUtilisateurInput = {
    idRole?: IntFieldUpdateOperationsInput | number
  }

  export type ConseilCreateManyPlanteInput = {
    idConseil?: number
    description: string
    idUtilisateur: number
  }

  export type GardiennageCreateManyPlanteInput = {
    idGardiennage?: number
    dateDebut: Date | string
    dateFin: Date | string
    idUtilisateur?: number | null
  }

  export type ConseilUpdateWithoutPlanteInput = {
    description?: StringFieldUpdateOperationsInput | string
    utilisateur?: UtilisateurUpdateOneRequiredWithoutConseilsNestedInput
  }

  export type ConseilUncheckedUpdateWithoutPlanteInput = {
    idConseil?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type ConseilUncheckedUpdateManyWithoutPlanteInput = {
    idConseil?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type GardiennageUpdateWithoutPlanteInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    utilisateur?: UtilisateurUpdateOneWithoutGardiennagesNestedInput
    conversation?: ConversationUpdateOneWithoutGardiennageNestedInput
  }

  export type GardiennageUncheckedUpdateWithoutPlanteInput = {
    idGardiennage?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    idUtilisateur?: NullableIntFieldUpdateOperationsInput | number | null
    conversation?: ConversationUncheckedUpdateOneWithoutGardiennageNestedInput
  }

  export type GardiennageUncheckedUpdateManyWithoutPlanteInput = {
    idGardiennage?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    idUtilisateur?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AvoirRoleCreateManyRoleInput = {
    idUtilisateur: number
  }

  export type AvoirRoleUpdateWithoutRoleInput = {
    utilisateur?: UtilisateurUpdateOneRequiredWithoutRolesNestedInput
  }

  export type AvoirRoleUncheckedUpdateWithoutRoleInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type AvoirRoleUncheckedUpdateManyWithoutRoleInput = {
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyConversationInput = {
    idMessage?: number
    dateEnvoi: string
    texte: string
    image?: string | null
    idUtilisateur: number
  }

  export type MessageUpdateWithoutConversationInput = {
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utilisateur?: UtilisateurUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutConversationInput = {
    idMessage?: IntFieldUpdateOperationsInput | number
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUncheckedUpdateManyWithoutConversationInput = {
    idMessage?: IntFieldUpdateOperationsInput | number
    dateEnvoi?: StringFieldUpdateOperationsInput | string
    texte?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    idUtilisateur?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UtilisateurCountOutputTypeDefaultArgs instead
     */
    export type UtilisateurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanteCountOutputTypeDefaultArgs instead
     */
    export type PlanteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationCountOutputTypeDefaultArgs instead
     */
    export type ConversationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilisateurDefaultArgs instead
     */
    export type UtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanteDefaultArgs instead
     */
    export type PlanteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConseilDefaultArgs instead
     */
    export type ConseilArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConseilDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GardiennageDefaultArgs instead
     */
    export type GardiennageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GardiennageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConversationDefaultArgs instead
     */
    export type ConversationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConversationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AvoirRoleDefaultArgs instead
     */
    export type AvoirRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AvoirRoleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}